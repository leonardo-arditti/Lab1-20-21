<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eserciziario Laboratorio 1 A.A 2020/2021</title>
    <link>https://leonardo-arditti.github.io/Lab1-20-21/</link>
    <description>Recent content on Eserciziario Laboratorio 1 A.A 2020/2021</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 23 Apr 2021 22:39:54 +0200</lastBuildDate><atom:link href="https://leonardo-arditti.github.io/Lab1-20-21/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>09 - Compito in classe</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-09-classe/</link>
      <pubDate>Fri, 23 Apr 2021 22:39:54 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-09-classe/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Esercizio 1 - isSorted Scrivere una funzione isSorted(a), con a un array di numeri. La funzione restituisce true se l&amp;rsquo;array e&#39; ordinato in senso strettamente crescente, e false altrimenti.
Esempi:
isSorted([-21,-2,0,4,6,210]) → true
isSorted([2,6,8,8,9,21]) → false
isSorted([2,6,8,9,10,-42]) → false
function isSorted(a) { for (let i = 0; i &amp;lt; a.</description>
    </item>
    
    <item>
      <title>08 - Compito in classe</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-08-classe/</link>
      <pubDate>Fri, 09 Apr 2021 22:39:54 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-08-classe/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Esercizio 1 - TS Scrivere una funzione generica &amp;ldquo;sommaArray(a, somma)&amp;rdquo; in TS (usando Generics). La funzione prende in input un array omogeneo &amp;ldquo;a&amp;rdquo; che potrebbe contenere elementi di qualsiasi tipo e una funzione &amp;ldquo;somma(x,y)&amp;rdquo;, che prende come parametri due elementi dello stesso tipo e restitusce la loro somma.</description>
    </item>
    
    <item>
      <title>06 - Compito in classe</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-06-classe/</link>
      <pubDate>Tue, 16 Mar 2021 22:39:54 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-06-classe/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Esercizio 1 Siano a un array di numeri, ordinato in senso crescente, e k un numero. Si scriva una funzione JS cerca(a, k, i, j), che, con un numero OTTIMO di operazioni di accesso ad a, restituisca true se k occorre nell&amp;rsquo;array a in una posizione compresa tra gli indici i e j, con 0&amp;lt;=i&amp;lt;j&amp;lt;a.</description>
    </item>
    
    <item>
      <title>Esercizi liberi lezioni 18-25</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-18-25/</link>
      <pubDate>Sat, 06 Feb 2021 10:56:51 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-18-25/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Fattori Si scriva una funzione fattori(n) che, dato come argomento un intero positivo n, restituisca un array contenente tutte le coppie di divisori di n, incluse le coppie (1,n) e (n,1), in ordine di primo elemento crescente. Ciascuna coppia è a sua volta rappresentata come un array. Esempi</description>
    </item>
    
    <item>
      <title>Progettino 1</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/progettino-1/</link>
      <pubDate>Fri, 29 Jan 2021 17:23:19 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/progettino-1/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
I numeri razionali Come sapete, i numeri razionali (o frazioni) sono definiti da un numeratore e un denominatore che sono a loro volta numeri interi. Sono numeri razionali ¾, ⅞, ½, ecc. Qualunque numero espresso in notazione decimale finita è un numero razionale; per esempio, 3.1415 è esprimibile come 31415/10000 o anche come 6283/2000.</description>
    </item>
    
    <item>
      <title>04 - Compito in classe</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-04-classe/</link>
      <pubDate>Fri, 27 Nov 2020 17:31:18 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-04-classe/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Esercizio 1 Si scriva la funzione ricorsiva sommaPari(a), che prende come parametro un array a di interi e restituisce la somma degli elementi pari.
Esempi:
sommaPari([5,9,1,-4,3,6,2,-5]) → 4
sommaPari([5,9,1,33,7,-3]) → 0
function sommaPariR(a,i = 0) { if (!(i &amp;lt; a.length)) return 0; return (a[i] % 2 == 0 ?</description>
    </item>
    
    <item>
      <title>Esercizi liberi lezioni 1-20</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-1-20/</link>
      <pubDate>Wed, 25 Nov 2020 12:44:32 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-1-20/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 SommAlterna Si scriva una funzione sommAlterna(a) che, dato come argomento un array di numeri a, restituisca la somma alternata degli elementi, ovvero +a0-a1+a2-a3+a4-a5… Esempi:
sommAlterna([1,2,3,4]) → -2
sommAlterna([1, -1, 1, -1]) → 4
sommAlterna([]) → 0
function sommAlterna(a) { let sum = 0; for (let i in a) { if (i % 2 == 0) sum += a[i]; else sum -= a[i]; } return sum; } SubSeq Si scriva una funzione subSeq(ago,pagliaio) che, dati come argomenti due array con elementi di qualunque tipo, restituisca true se l’array ago è una sottosequenza dell’array pagliaio (ovvero, esiste un punto all’interno di pagliaio in cui si trovano tutti gli elementi di ago, consecutivamente e nello stesso ordine) Esempi:</description>
    </item>
    
    <item>
      <title>Esercizi ricorsione</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-ricorsione/</link>
      <pubDate>Tue, 17 Nov 2020 12:16:50 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-ricorsione/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
Fattoriale Si scriva una funzione fattoriale(n) che, dato come argomento un intero positivo, restituisca il suo fattoriale. Esempi:
fattoriale(1) → 1
fattoriale(5) → 120
fattoriale(10) → 3628800
function fattoriale(n) { if (n&amp;lt;=1) return 1; return n * fattoriale(n-1); } function fattoriale_tailrec(n,acc = 1) { if (n &amp;lt;= 1) return acc; return fattoriale_tailrec(n-1,acc * n); } // fattoriale_tailrec(10) → 3628800 Numeri triangolari Realizzare una funzione ricorsiva che, dato un intero &amp;gt;=0 n, calcoli il valore dell’ennesimo numero triangolare.</description>
    </item>
    
    <item>
      <title>03 - Compito in classe</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-03-classe/</link>
      <pubDate>Fri, 13 Nov 2020 17:31:18 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-03-classe/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Esercizio 03.1 - Array Si scriva una funzione calcola(a) che, dato un array di interi a, restituisca la somma dei quadrati degli elementi di a.
function calcola(a) { let sum = 0; for (let i in a) sum += a[i]**2; return sum; } // calcola([-21,32,0,99,101,101,2,76,22,1349]) → 1857733  // calcola([0,0,12,-66,9]) → 4581  // calcola([1,2,3,4,5,6]) → 91 Esercizio 03.</description>
    </item>
    
    <item>
      <title>Esercizi liberi lezioni 1-14</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-1-14/</link>
      <pubDate>Thu, 12 Nov 2020 00:48:06 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-1-14/</guid>
      <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Produttoria Si scriva una funzione produttoria(a,b) che, dati come argomenti due interi positivi a e b, con a ≤ b, restituisca il prodotto di tutti gli interi fra a e b, estremi compresi. Esempi:
produttoria(4,6) → 120
produttoria(10,10) → 10
produttoria(10,11) → 110
function produttoria(a,b) { let n = 1; for (let i = a; i &amp;lt;= b; i++) { n *= i; } return n; } Quaterne Si scriva una funzione quaterne(a,b) che, dati come argomenti due interi a e b, con a ≤ b, restituisca il numero di quaterne (cioè sequenze distinte di quattro numeri consecutivi) comprese fra a e b, estremi esclusi.</description>
    </item>
    
    <item>
      <title>Introduzione al sito</title>
      <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/introduzione-al-sito/</link>
      <pubDate>Tue, 15 Sep 2020 17:23:19 +0200</pubDate>
      
      <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/introduzione-al-sito/</guid>
      <description>L&amp;rsquo;obiettivo di questa repository è di raggruppare tutti gli esercizi svolti durante il corso di Laboratorio 1 dell&amp;rsquo;A.A 2020/2021 che è stato erogato interamente online.
Tutte le soluzioni agli esercizi possono essere provate utilizzando la piattaforma Repl.it con un nuovo progetto Node.js oppure usando la console devTools di Google Chrome premendo Ctrl+Shift+I su OS Windows.
Le soluzioni proposte sono un misto tra le soluzioni sviluppate da me durante i compiti e quelle fornite dai docenti nelle ore di lezione.</description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Eserciziario Laboratorio 1 A.A 2020/2021</title>
        <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/</link>
        <description>Recent content in Posts on Eserciziario Laboratorio 1 A.A 2020/2021</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 27 Nov 2020 17:31:18 +0200</lastBuildDate>
        <atom:link href="https://leonardo-arditti.github.io/Lab1-20-21/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>04 - Compito in classe</title>
            <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-04-classe/</link>
            <pubDate>Fri, 27 Nov 2020 17:31:18 +0200</pubDate>
            
            <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-04-classe/</guid>
            <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Esercizio 1 Si scriva la funzione ricorsiva sommaPari(a), che prende come parametro un array a di interi e restituisce la somma degli elementi pari.
Esempi:
sommaPari([5,9,1,-4,3,6,2,-5]) → 4
sommaPari([5,9,1,33,7,-3]) → 0
function sommaPariR(a,i = 0) { if (!(i &amp;lt; a.length)) return 0; return (a[i] % 2 == 0 ?</description>
            <content type="html"><![CDATA[<p>Per completezza, si rimanda al <a href="/posts/introduzione-al-sito/">primo post del sito</a> per ulteriori informazioni.</p>
<p>Si ricorda che dello stesso esercizio possono esistere più varianti.</p>
<hr>
<h2 id="esercizio-1">Esercizio 1</h2>
<p>Si scriva la funzione ricorsiva sommaPari(a), che prende come parametro un array a di interi e restituisce la somma degli elementi pari.</p>
<p>Esempi:</p>
<p>sommaPari([5,9,1,-4,3,6,2,-5]) → 4</p>
<p>sommaPari([5,9,1,33,7,-3]) → 0</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sommaPariR</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span>))
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">sommaPariR</span>(<span style="color:#a6e22e">a</span>,<span style="color:#f92672">++</span><span style="color:#a6e22e">i</span>);
}
</code></pre></div><h2 id="esercizio-2">Esercizio 2</h2>
<p>Si scriva una funzione map(f,a), dove f è una funzione che prende come argomento un intero e restituisce un valore numerico, e a è un array di interi. map (f,a) restituisce l&rsquo;array il cui i-esimo elemento è il risultato dell&rsquo;applicazione di f all&rsquo;i-esimo elemento di a.</p>
<p>Esempi:</p>
<p>map(x =&gt; x*x, [1,2,3,4,5,6]) → [1,4,9,16,25,36]</p>
<p>map (x =&gt; Math.sqrt(x),[1,2,3,4,5,6]) → [1,1.4142135623730951,1.7320508075688772,2,2.23606797749979,2.449489742783178]</p>
<p>map(x =&gt; x++, [1,2,3,4,5,6]) → [1,2,3,4,5,6]</p>
<p>map(x =&gt; ++x, [1,2,3,4,5,6]) → [2,3,4,5,6,7]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">f</span>);
}

<span style="color:#75715e">// oppure
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">a</span>)
    <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>])

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>;
}
</code></pre></div><h2 id="esercizio-3">Esercizio 3</h2>
<p>Si scriva una funzione filter(f,a), dove f è una funzione che prende come argomento un intero e restituisce un valore booleano, e a è un array di interi. filter (f,a) restituisce l&rsquo;array in cui sono presenti solo i valori per cui f restituisce true, nell&rsquo;ordine in cui compaiono in a.</p>
<p>Esempi:</p>
<p>filter(x =&gt; x&gt;0, [10,4,-90,21,-1]) → [10,4,21]</p>
<p>filter(x =&gt; x&lt;0, [10,4,-90,21,-1]) → [-90,-1]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">elem</span> =&gt; <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">elem</span>))
}

<span style="color:#75715e">// oppure 
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> [];

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">a</span>)
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">elem</span>))
      <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">elem</span>)

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>;
}
</code></pre></div><h2 id="esercizio-4">Esercizio 4</h2>
<p>Si scriva una funzione similitudine(a,b), con a e b stringhe. La funzione restituisce un oggetto che contiene come chiavi i caratteri che compaiono nelle due stringhe alla stessa posizione, e come valore la posizione corrispondente.</p>
<p>Esempi:</p>
<p>similitudine(&ldquo;The Holy Grail&rdquo;, &ldquo;Life of Brian&rdquo;) → {o: 5, a: 11}</p>
<p>Se lo stesso carattere appare più volte in entrambe le stringhe nella stessa posizione, per esempio “pippo” e “pappa”, va bene restituire una qualunque delle posizioni in cui appare (nell’esempio: {p: 0} o {p: 2} o {p: 3}).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">similitudine</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">b</span>[<span style="color:#a6e22e">i</span>])
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">i</span>;
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><p>Esercizio 5</p>
<p>Si scriva una funzione tombola(a,b) che prende come argomenti due array di interi positivi (&gt;0) distinti (senza ripetizioni).
se nessun intero in a compare in b, le funzione restituisce (esattamente) la stringa &ldquo;ritenta&rdquo;;
se solo un intero in a compare in b, le funzione restituisce (esattamente) la stringa &ldquo;ritenta&rdquo;;
se due interi in a compaiono in b, la funzione restituisce (esattamente) la stringa &ldquo;ambo&rdquo;;
se tre interi in a compaiono in b, la funzione restituisce (esattamente) la stringa &ldquo;terno&rdquo;;
in tutti gli altri casi restituisce (esattamente) la stringa &ldquo;tombola&rdquo;.</p>
<p>Esempi:</p>
<p>tombola([1,17,4,90],[4,17,33,89,32]) → &lsquo;ambo&rsquo;</p>
<p>tombola([1,17,4,90],[6,27,33,89,32]) → &lsquo;ritenta&rsquo;</p>
<p>tombola([1,17,4,90],[1,27,4,89,32,90,17]) → &lsquo;tombola&rsquo;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">tombola</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#a6e22e">elem</span>))
      <span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>;
  }

  <span style="color:#66d9ef">switch</span>(<span style="color:#a6e22e">count</span>) {
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ritenta&#34;</span>

    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> 
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ritenta&#34;</span>

    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span> 
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ambo&#34;</span>

    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;terno&#34;</span>

    <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span> 
      <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;tombola&#34;</span>
  }
}
</code></pre></div><p>Esercizio 6</p>
<p>Le somme prefisse di una sequenza di interi x0, x1, &hellip;, xn sono una sequenza di interi y0, y1, &hellip;, yn tali che y0 = x0, y1= x0+x1, y2 = x0+x1+x2, &hellip;, yn = x0+x1+x2+&hellip;+xn.</p>
<p>Si scriva una funzione sommeP(a) che prende come argomento un&rsquo;array a di interi e restituisce un array contenente le somme prefisse degli elementi di a.</p>
<p>Esempi:</p>
<p>sommeP([1,2,3,4,5,6]) → [1,3,6,10,15,21]</p>
<p>sommeP([0,2,4,4,2,0,-2,-4,-6]) → [0,2,6,10,12,12,10,6,0]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sommeP</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">newArr</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Array(<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span>)
  <span style="color:#a6e22e">newArr</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>];

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">i</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span>) {
      <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">j</span>];
    }

    <span style="color:#a6e22e">newArr</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>;
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">newArr</span>;
}
</code></pre></div><h2 id="esercizio-7">Esercizio 7</h2>
<p>Si scriva una funzione decifra(s,k) con s una stringa cifrata e k un intero positivo. La funzione restituisce la corrispondente stringa decifrata utilizzando k (la chiave). La decriptazione segue le regole del cifrario di Cesare applicate alla codifica UNICODE dei caratteri. In particolare:
data una lettera c della stringa cifrata questa viene sostituite dalla lettera che si trova k posizioni prima nella codifica UNICODE. Ad esempio, la lettera &lsquo;e&rsquo; viene decrittata nella lettera &lsquo;c&rsquo; quando la chiave k è uguale a 2;
si assuma che la stringa contenga solo lettere minuscole dell&rsquo;alfabeto (inglese), oppure il carattere spazio;
il carattere spazio va lasciato inalterato.</p>
<p>Attenzione: se nel tornare indietro di k posizioni finite fuori dall&rsquo;alfabeto (prima della lettera &lsquo;a&rsquo;) ricominciate dal fondo (dalla ‘z’). Ad esempio la lettera criptata &lsquo;a&rsquo; viene decriptata con &lsquo;y&rsquo; quando k è uguale a 2; &lsquo;a&rsquo; viene decriptata con &lsquo;z&rsquo; se k = 1).
SUGGERIMENTO: il codice UNICODE per &lsquo;a&rsquo; e' 97. Si usino le funzioni s.charCodeAt() e String.fromCharCode().</p>
<p>Esempi:</p>
<p>decifra(&ldquo;hal&rdquo;,25) → &lsquo;ibm&rsquo;</p>
<p>decifra(&ldquo;hal zzzz&rdquo;,25) → &lsquo;ibm aaaa&rsquo;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"></code></pre></div><h2 id="esercizio-8">Esercizio 8</h2>
<p>Si scriva una funzione verificaSomma(a) che prende come parametro un array di interi. La funzione restituisce true se ogni elemento di a (tranne il primo) è pari alla somma degli elementi che lo precedono, e false altrimenti.</p>
<p>Esempi:</p>
<p>verificaSomma([1, 2, 6, 10, 32]) → false</p>
<p>verificaSomma([1, 1, 2, 4, 8]) → true</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">verificaSomma</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">i</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span>) {
      <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">j</span>]
    }

    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">sum</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>])
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
  }

  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
}
</code></pre></div><h2 id="esercizio-9">Esercizio 9</h2>
<p>Si scriva una funzione frequenzaC(s) che, preso come parametro una stringa s, restituisca un dizionario le cui chiavi sono i caratteri contenuti in s e i cui valori il numero di volte che quel carattere compare nella stringa (anche il carattere spazio va considerato).</p>
<p>Esempi:</p>
<p>frequenzaC(&ldquo;i vitelli dei romani sono belli&rdquo;) → {i: 6,' &lsquo;: 5,v: 1,t: 1,e: 3,l: 4,d: 1,r: 1,o: 3,m:1,a: 1,n: 2,s: 1,b: 1}</p>
<p>frequenzaC(&ldquo;La forzA sia con te!&quot;) → {L: 1,a: 2,&rsquo; &lsquo;: 4,f: 1,o: 2,r: 1,z: 1,A: 1,s: 1,i:1,c: 1,n: 1,t: 1,e: 1,&rsquo;!': 1}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">frequenzaC</span>(<span style="color:#a6e22e">s</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">freq</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;&#39;</span>);
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">freq</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">freq</span>.<span style="color:#a6e22e">filter</span>((<span style="color:#a6e22e">elem</span>) =&gt; <span style="color:#a6e22e">elem</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">char</span>).<span style="color:#a6e22e">length</span>;
    <span style="color:#a6e22e">obj</span>[<span style="color:#66d9ef">char</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">count</span>;  
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><h2 id="esercizio-10">Esercizio 10</h2>
<p>Si scriva una funzione contaDispari(T) che dato un albero binario (i cui nodi sono implementati come visto a lezione come oggetti con chiavi val, sx e dx) restituisca il numero di nodi contenente un valore dispari.</p>
<p>Esempi:</p>
<p>contaDispari({val:7,sx:{val: 4, sx: {val: 3}, dx: {val:12, sx: {val: 4, dx:{val:3}, sx:{val: 8}}}}, dx:{val: 11, dx: {val: 3}, sx: {val:8, sx: {val: 6}}}}) → 5</p>
<p>contaDispari({val:8,sx:{val: -4, sx: {val: 33}, dx: {val:13, sx: {val: 4, dx:{val:-3}, sx:{val: 81}}}}, dx:{val: 11, dx: {val: 3}, sx: {val:8, sx: {val: 63}}}}) → 7</p>
<p>contaDispari({val:8,sx:{val: -4, sx: {val: 32}, dx: {val:12, sx: {val: 2, dx:{val:-2}, sx:{val: 812}}}}, dx:{val: 112, dx: {val: 32}, sx: {val:82, sx: {val: 632}}}}) → 0</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">contaDispari</span>(<span style="color:#a6e22e">T</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">contaDispari</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">contaDispari</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>);
}
</code></pre></div><h2 id="esercizio-11">Esercizio 11</h2>
<p>Si scriva una funzione gby(data), che prende come argomento un array di dizionari (oggetti). Ogni dizionario rappresenta la carriera scolastica di uno studente. In particolare, ogni dizionario ha come chiave il nome di un insegnamento, e come valore il voto preso all&rsquo;esame (che si assume essere &gt;= 18).</p>
<p>Ad esempio, il seguente array contiene le carriere di 3 studenti:
data = [{lab1:20, fi: 30},{analisi:28, lab1:30},{algebraL:28, ProgAlgo:30}]</p>
<p>La funzione gby(data) restituisce un dizionario le cui chiavi sono i nomi degli insegnamenti, e come valore la media dei voti presi da tutti gli studenti per quell&rsquo;insegnamento.</p>
<p>Esempi:</p>
<p>gby([{lab1:20, fi: 30}, {analisi:28, lab1:30}, {algebraL:28, progAlgo:30, fi: 18}]) → {lab1: 25, fi: 24, analisi: 28, algebraL: 28, progAlgo: 30}</p>
<p>gby([{lab1:20, fi: 29}, {analisi:28, lab1:27}, {algebraL:28, progAlgo:30, fi: 18}]) → {lab1: 23.5, fi: 23.5, analisi: 28, algebraL: 28, progAlgo: 30}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">gby</span>(<span style="color:#a6e22e">data</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">n_studenti</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">o</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">data</span>) {
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">o</span>) {
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">obj</span>) {
        <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">key</span>] <span style="color:#f92672">+=</span> <span style="color:#a6e22e">o</span>[<span style="color:#a6e22e">key</span>];
        <span style="color:#a6e22e">n_studenti</span>[<span style="color:#a6e22e">key</span>]<span style="color:#f92672">++</span>;
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">key</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">o</span>[<span style="color:#a6e22e">key</span>]
        <span style="color:#a6e22e">n_studenti</span>[<span style="color:#a6e22e">key</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
      }
    }
  }

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">obj</span>) {
    <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">key</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">key</span>]<span style="color:#f92672">/</span><span style="color:#a6e22e">n_studenti</span>[<span style="color:#a6e22e">key</span>];
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><h2 id="esercizio-12">Esercizio 12</h2>
<p>Si scriva una funzione dna(s,a), che prende come argomento una stringa s ed un array di stringhe a, e restituisce un dizionario le cui chiavi sono tutte le stringhe in a. Il valore di una chiave c è l&rsquo;array contenente tutte le posizioni in s da cui iniziano le occorrenze di c (se non ci sono occorrenze di c in s allora l&rsquo;array sarà vuoto).
Esempi:</p>
<p>dna(&ldquo;actgcctgaactgactgaa&rdquo;,[&ldquo;act&rdquo;,&ldquo;cgt&rdquo;,&ldquo;aat&rdquo;]) → {act: [0,9,13], cgt: [], aat: []}</p>
<p>dna(&ldquo;actgcgtgaactgactgaa&rdquo;,[&ldquo;act&rdquo;,&ldquo;cgt&rdquo;,&ldquo;aat&rdquo;]) → {act: [0,9,13], cgt: [4], aat: []}</p>
<p>dna(&ldquo;actgcgtgaactgactgaa&rdquo;,[&ldquo;act&rdquo;,&ldquo;ctg&rdquo;,&ldquo;tga&rdquo;]) → {act: [0,9,13], ctg: [1,10,14], tga: [6,11,15]}</p>
<p>PS: Non è detto che le stringhe in a siano sempre di 3 caratteri.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">dna</span>(<span style="color:#a6e22e">s</span>,<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">a</span>) {
    <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">elem</span>] <span style="color:#f92672">=</span> [];
  }

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">index</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#a6e22e">elem</span>);
    
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">index</span> <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">elem</span>].<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">index</span>);

    <span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">index</span> <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
      <span style="color:#a6e22e">index</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#a6e22e">elem</span>,<span style="color:#a6e22e">index</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);

      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">index</span> <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
        <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">elem</span>].<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">index</span>);
    }
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><h2 id="esercizio-13">Esercizio 13</h2>
<p>Un ospedale possiede dati genetici di pazienti, dove ogni paziente è rappresentato dal numero di mutazioni su un set di geni. Possiamo rappresentare il paziente come un oggetto dove le chiavi sono i geni e i valori il numero di mutazioni.
Per esempio paz1 = {&ldquo;TP53&rdquo;:10, &ldquo;BRC1&rdquo;:20, &ldquo;RAS&rdquo;:0,&ldquo;MAPK&rdquo;:3} rappresenta un paziente che presenta mutazioni su 4 geni.
Un pathway è un insieme di geni. Per esempio pat1 = {&ldquo;TP53&rdquo;:1, &ldquo;RAS&rdquo;:1, &ldquo;BRC1&rdquo;:1} rappresenta un pathway con 3 geni.
Dato un paziente paz, si definisce il livello di mutazione di paz rispetto a un pathway pat come la media del numero di mutazioni di paz per ogni gene presente in pat. Se un gene presente in pat non esiste nei dati del paziente, si assume che quella mutazione abbia valore 0 per paz.
Per esempio, per il paz1 dell&rsquo;esempio riportato sopra,il livello di mutazione rispetto a pat1 è 10, risultante dalla media tra 10 (valore di TP53), 0 (valore di RAS) e 20 (valore di BRC1).
Si scriva una funzione analisiPathway(pazienti, path) che prende due parametri: un array di pazienti e un pathway. La funzione restituisce un array con il livello di mutazione di quel pathway per ogni paziente presente nell&rsquo;array (nell&rsquo;array restituito, il valore in posizione i corrisponde al livello di mutazione per il paziente i).</p>
<p>Esempi:</p>
<p>analisiPathway([{&ldquo;TP53&rdquo;:10, &ldquo;BRC1&rdquo;:20, &ldquo;RAS&rdquo;:0,&ldquo;MAPK&rdquo;:3},{&ldquo;TP53&rdquo;:12, &ldquo;MAPK&rdquo;:3}, {&ldquo;TP53&rdquo;:1, &ldquo;RAS&rdquo;:1,&ldquo;BRC1&rdquo;:7},{&ldquo;RASK&rdquo;:1,&ldquo;CLN&rdquo;:1,&ldquo;MAPK&rdquo;:1}],{&ldquo;TP53&rdquo;:1,&ldquo;RAS&rdquo;:1,&ldquo;BRC1&rdquo;:1}) → [10,4,3,0]</p>
<p>analisiPathway([{&ldquo;TP53&rdquo;:10, &ldquo;BRC1&rdquo;:20, &ldquo;RAS&rdquo;: 60, &ldquo;MAPK&rdquo;:3}, {&ldquo;TP53&rdquo;:6}, {&ldquo;TP53&rdquo;:3,&ldquo;RAS&rdquo;:3,&ldquo;BRC1&rdquo;:7}],{&ldquo;TP53&rdquo;:1,&ldquo;RAS&rdquo;:1,&ldquo;BRC1&rdquo;:1}) → [30,2,4.333333333333333]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">analisiPathway</span>(<span style="color:#a6e22e">pazienti</span>, <span style="color:#a6e22e">path</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> [];

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">paz</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">pazienti</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">media</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">paz</span>) {
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">path</span>) {
        <span style="color:#a6e22e">media</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">paz</span>[<span style="color:#a6e22e">key</span>];
        <span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>;
      }
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">count</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)
      <span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">media</span><span style="color:#f92672">/</span>Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">path</span>).<span style="color:#a6e22e">length</span>);
    <span style="color:#66d9ef">else</span>
      <span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">push</span>(<span style="color:#ae81ff">0</span>)
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arr</span>;
}
</code></pre></div><h2 id="esercizio-14">Esercizio 14</h2>
<p>Si scriva una funzione bisect(f,a,b), dove a e b sono valori numerici, e f è una funzione monotona, definita e continua nell&rsquo;intervallo [a,b], e tale che f(a)*f(b) &lt; 0. La funzione bisect(f,a,b) restituisce un valore x per cui |f(x)| &lt;= 0,0001 (in altre parole, deve approssimare lo zero di f nell&rsquo;intervallo [a,b] con una tolleranza di al più 0,0001).</p>
<p>NOTA: dato che bisect(f,a,b) restituisce una approssimazione dello zero di f, non è detto che il valore che trovate sia esattamente uguale a quello riportato negli esempi. Per essere considerata corretta, la vostra soluzione deve riportare un valore che si discosta al più di 0.0001 dallo zero di f in [a,b]).</p>
<p>Esempi:</p>
<p>bisect(x=&gt;x**3, -1, 1) → 0</p>
<p>bisect(x=&gt;x**3-x-2,1,2) → 1.52142333984375</p>
<p>bisect(x=&gt;x*Math.cos(x),1,4) → 1.570831298828125</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">bisect</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">precision</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0001</span>;

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">middle</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">a</span><span style="color:#f92672">+</span><span style="color:#a6e22e">b</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>;

  <span style="color:#66d9ef">if</span> (Math.<span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">middle</span>)) <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">precision</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">middle</span>;
  
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">middle</span>) <span style="color:#f92672">*</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">a</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">bisect</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">middle</span>)
  
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">bisect</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">middle</span>,<span style="color:#a6e22e">b</span>);
}
</code></pre></div><h2 id="esercizio-15">Esercizio 15</h2>
<p>Diciamo che un nodo di un albero binario è in equilibrio se il suo valore è &gt;= del valore del suo figlio sinistro (se esiste), ed è &lt;= del valore del suo figlio destro (se esiste). Diciamo che un albero binario è in equilibrio se tutti i suoi nodi sono in equilibrio.
Si scriva una funzione inEquilibrio(T) che dato un albero binario (i cui nodi sono implementati come visto a lezione come oggetti con chiavi val, sx e dx) restituisca true se T è in equilibrio, e false altrimenti.</p>
<p>Esempi:</p>
<p>inEquilibrio({val:7,sx:{val: 4, sx: {val: 3}, dx: {val:12, sx: {val: 4, dx:{val:8}, sx:{val: 2}}}}, dx:{val: 11, dx: {val: 18}, sx: {val:3, sx: {val: 2}}}}) → true</p>
<p>inEquilibrio({val:8,sx:{val: -4, sx: {val: 33}, dx: {val:13, sx: {val: 4, dx:{val:-3}, sx:{val: 81}}}}, dx:{val: 11, dx: {val: 3}, sx: {val:8, sx: {val: 63}}}}) → false</p>
<p>inEquilibrio({val:8}) → true</p>
<p>inEquilibrio({val:8,sx:{val: 8},dx:{val:8}}) → true</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">inEquilibrio</span>(<span style="color:#a6e22e">T</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span> <span style="color:#f92672">===</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">inEquilibrio</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">inEquilibrio</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>);
}
</code></pre></div><h2 id="esercizio-16">Esercizio 16</h2>
<p>Si scriva una funzione innestaSottoAlberi(T,sT) che prende come parametri due alberi binari T e sT, (i cui nodi sono implementati come visto a lezione come oggetti con chiavi val, sx e dx).
La funzione sostituisce nell&rsquo;albero T i sottoalberi &lsquo;secchi&rsquo; con l&rsquo;albero sT. Un sottoalbero è secco se il valore nella radice è &lt; 0. Si assuma che sT non contiene sottoalberi secchi.</p>
<p>Esempi:</p>
<p>t={val:20, sx:{val:19, sx:{val:8}, dx:{val:7, sx:{val:9}}}, dx:{val:-3, sx:{val:-8},dx:{val:7}}}</p>
<p>st={val:1, sx:{val:1}, dx:{val:1}}</p>
<p>Dopo la chiamata a innestaSottoAlberi(t,st), t contiene {val:20, sx:{val:19, sx:{val:8}, dx:{val:7, sx:{val:9}}}, dx:{val:1, sx:{val:1}, dx:{val:1}}}</p>
<p>t={val:20, sx:{val:19, sx:{val:8}, dx:{val:7, sx:{val:9}}}, dx:{val:-3, sx:{val:-8},dx:{val:7}}}</p>
<p>st={val: 0}</p>
<p>Dopo la chiamata a innestaSottoAlberi(t,st), t contiene {val:20, sx:{val:19, sx:{val:8}, dx:{val:7, sx:{val:9}}}, dx:{val:0}}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">innestaSottoAlberi</span>(<span style="color:#a6e22e">T</span>,<span style="color:#a6e22e">sT</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">found_sx</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">found_dx</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span> <span style="color:#f92672">===</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">sT</span>.<span style="color:#a6e22e">val</span>;
    <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">sT</span>.<span style="color:#a6e22e">dx</span>;
    <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">sT</span>.<span style="color:#a6e22e">sx</span>;
    <span style="color:#66d9ef">return</span>;
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#a6e22e">innestaSottoAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>,<span style="color:#a6e22e">sT</span>)
    <span style="color:#a6e22e">found_sx</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#a6e22e">innestaSottoAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>,<span style="color:#a6e22e">sT</span>)
    <span style="color:#a6e22e">found_dx</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">found_dx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">found_sx</span>) {
    <span style="color:#a6e22e">innestaSottoAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>);
    <span style="color:#a6e22e">innestaSottoAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>);
  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">found_dx</span>)
    <span style="color:#a6e22e">innestaSottoAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>)
  <span style="color:#66d9ef">else</span>
    <span style="color:#a6e22e">innestaSottoAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>)
}
</code></pre></div><h2 id="esercizio-17">Esercizio 17</h2>
<p>Si scriva una funzione risolvi(eq) che prende come argomento un&rsquo;equazione di primo grado ax+b=0, rappresentata come oggetto avente due proprietà, a e b. La funzione risolve l&rsquo;equazione, e inserisce il risultato (cioe' il valore dell&rsquo;incognita x) nell&rsquo;oggetto eq, nella proprietà x. Si può assumere che a!=0 sempre.</p>
<p>La funzione non deve restituire nulla (no return).</p>
<p>Esempi:</p>
<p>eq = {a:9,b:18}</p>
<p>Dopo la chiamata a risolvi(eq), eq contiene {a:9, b:18, x:-2}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">risolvi</span>(<span style="color:#a6e22e">eq</span>) {
  <span style="color:#75715e">// ax + b = 0 =&gt; x = -b/a
</span><span style="color:#75715e"></span>
  <span style="color:#a6e22e">eq</span>.<span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">eq</span>.<span style="color:#a6e22e">b</span><span style="color:#f92672">/</span><span style="color:#a6e22e">eq</span>.<span style="color:#a6e22e">a</span>; 
}
</code></pre></div><h2 id="esercizio-18">Esercizio 18</h2>
<p>Una biblioteca ha una collezione di libri con titolo, autore e numero di copie disponibili. Un libro è rappresentato mediante un oggetto avente 3 proprietà: titolo, autore, copie. La biblioteca viene rappresentata da un array di libri.</p>
<p>Si scriva una funzione prestito(biblioteca, s), con biblioteca un array di libri, e s una stringa che rappresenta il titolo di un libro. Se in biblioteca è presente un libro avente titolo s, quel libro viene dato in prestito: il numero di copie di quel libro in biblioteca viene decrementato, e la funzione restituisce true.</p>
<p>Se il libro non è disponibile (o non esiste in biblioteca, o non ci sono copie disponibili), la funzione restituisce false, e biblioteca non viene modificato.</p>
<p>Esempi:</p>
<p>biblioteca = [{titolo:&lsquo;Pride and Prejudice&rsquo;,autore:&lsquo;Jane Austen&rsquo;, copie:10}, {titolo: &lsquo;Eloquent Javascript&rsquo;,autore:&lsquo;Marijn Haverbeke&rsquo;,copie:0},{titolo: &lsquo;The lord of the rings&rsquo;,autore:&lsquo;J. R. R. Tolkien.',copie:6}]</p>
<p>prestito(biblioteca,&ldquo;The lord of the rings&rdquo;) restituisce true e biblioteca contiene
[{titolo:&lsquo;Pride and Prejudice&rsquo;,autore:&lsquo;Jane Austin&rsquo;, copie:10},{titolo: &lsquo;Eloquent Javascript&rsquo;,autore:&lsquo;Marijn Haverbeke&rsquo;,copie:0},{titolo: &lsquo;The lord of the rings&rsquo;,autore:&lsquo;J. R. R. Tolkien.',copie:5}]</p>
<p>biblioteca = [{titolo:&lsquo;Pride and Prejudice&rsquo;,autore:&lsquo;Jane Austen&rsquo;, copie:10}, {titolo: &lsquo;Eloquent Javascript&rsquo;,autore:&lsquo;Marijn Haverbeke&rsquo;,copie:0},{titolo: &lsquo;The lord of the rings&rsquo;,autore:&lsquo;J. R. R. Tolkien.',coppie:6}]</p>
<p>prestito(biblioteca,&ldquo;Sense and Sensibility&rdquo;) restituisce false e biblioteca non viene modificato.</p>
<p>biblioteca = [{titolo:&lsquo;Pride and Prejudice&rsquo;,autore:&lsquo;Jane Austen&rsquo;, copie:10}, {titolo: &lsquo;Eloquent Javascript&rsquo;,autore:&lsquo;Marijn Haverbeke&rsquo;,copie:0},{titolo: &lsquo;The lord of the rings&rsquo;,autore:&lsquo;J. R. R. Tolkien.',copie:6}]</p>
<p>prestito(biblioteca,&lsquo;Eloquent Javascript&rsquo;) restituisce false e biblioteca non viene modificato.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">prestito</span>(<span style="color:#a6e22e">biblioteca</span>,<span style="color:#a6e22e">s</span>) {

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">libro</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">biblioteca</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">libro</span>[<span style="color:#e6db74">&#39;titolo&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">s</span>) {
      <span style="color:#75715e">// controllo della disponibilità
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">libro</span>[<span style="color:#e6db74">&#39;copie&#39;</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
      <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">libro</span>[<span style="color:#e6db74">&#39;copie&#39;</span>]<span style="color:#f92672">--</span>;
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
      }
    }
  }
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
}
</code></pre></div><h2 id="esercizio-19">Esercizio 19</h2>
<p>Si scriva una funzione tagliaAlberi(T), che prende come parametro un albero binario T (i cui nodi sono implementati come visto a lezione come oggetti con chiavi val, sx e dx). La funzione taglia i sottoalberi &lsquo;secchi&rsquo;. Un sottoalbero è secco se il valore nella radice del sottoalbero è &lt; 0. Il taglio avviene eliminando il contenuto del nodo secco - le proprietà val, sx e dx (si vedano gli esempi).
La funzione non deve restituire nulla (no return).</p>
<p>Esempi:</p>
<p>t={val:20, sx:{val:19, sx:{val:8}, dx:{val:7, sx:{val:9} } }, dx:{val:-3, sx:{val:-8},dx:{val:7}}}</p>
<p>Dopo la chiamata a tagliaAlberi(t), t contiene {val:20, sx:{val:19, sx:{val:8}, dx:{val:7, sx:{val:9} } }, dx:{}}</p>
<p>t={val:-2, sx:{val:19, sx:{val:8}, dx:{val:7, sx:{val:9} } }, dx:{val:-3, sx:{val:-8},dx:{val:7}}}</p>
<p>Dopo la chiamata a tagliaAlberi(t), t contiene {}</p>
<p>t={val:20, sx:{val:19, sx:{val:-8}, dx:{val:7, sx:{val:2} } }, dx:{val:3, sx:{val:-8},dx:{val:1}}};</p>
<p>Dopo la chiamata a tagliaAlberi(t), t contiene {val:20, sx:{val:19, sx:{}, dx:{val:7, sx:{val:2} } }, dx:{val:3, sx:{},dx:{val:1}}}</p>
<p>PS: Viene eliminato il contenuto, non il nodo: quindi resta un { }.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">tagliaAlberi</span>(<span style="color:#a6e22e">T</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">found_sx</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">found_dx</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span> <span style="color:#f92672">===</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>;
    <span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>;
    <span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span>;
    <span style="color:#66d9ef">return</span>; 
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#a6e22e">tagliaAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>)
    <span style="color:#a6e22e">found_sx</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
  }
    

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#a6e22e">tagliaAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>)
    <span style="color:#a6e22e">found_dx</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
  }
    
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">found_sx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">found_dx</span>) {
    <span style="color:#a6e22e">tagliaAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>)
    <span style="color:#a6e22e">tagliaAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>)
  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">found_sx</span>) {
    <span style="color:#a6e22e">tagliaAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>)
  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">found_dx</span>) {
    <span style="color:#a6e22e">tagliaAlberi</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>)
  }
}
</code></pre></div><h2 id="esercizio-20">Esercizio 20</h2>
<p>Si scriva una funzione sonoPari(f) che prende come parametro una funzione f che, dato come argomento un intero, restituisce un valore numerico. sonoPari(f) restituisce una funzione isp(a) che, preso come argomento un array a di valori numerici, restituisce un array di valori booleani res tale che res[i] è true se f(a[i]) è pari, e false altrimenti.</p>
<p>Esempi:</p>
<p>sonoPari(x=&gt;2*x)([1,2,4]) → [true,true,true]</p>
<p>sonoPari(x=&gt;Math.sqrt(x))([1,2,4]) → [false,false,true]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sonoPari</span>(<span style="color:#a6e22e">f</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">isp</span>(<span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">map</span>((<span style="color:#a6e22e">elem</span>) =&gt; <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">elem</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>);
  }
} 
</code></pre></div><h2 id="esercizio-21">Esercizio 21</h2>
<p>Si scriva una funzione sommaF(f) che prende come parametro una funzione f che preso un intero restituisce un valore numerico. sommaF(f) restituisce una funzione che prende come parametro un array di interi, e restituisce la somma dei valori restituiti da f su ogni elemento dell&rsquo;array.</p>
<p>Esempi:</p>
<p>sommaF(x=&gt;x*x)([1,2,3,4]) → 30</p>
<p>sommaF(x=&gt;2*x)([1,2,3,4]) → 20</p>
<p>sommaF(Math.sqrt)([1,2,3,4]) → 6.146264369941973</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sommaF</span>(<span style="color:#a6e22e">f</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">f</span>).<span style="color:#a6e22e">reduce</span>((<span style="color:#a6e22e">acc</span>,<span style="color:#a6e22e">curr</span>) =&gt; <span style="color:#a6e22e">acc</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">curr</span>,<span style="color:#ae81ff">0</span>)
  }
}

<span style="color:#75715e">// oppure 
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sommaF</span>(<span style="color:#a6e22e">f</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">a</span>) 
      <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">elem</span>)

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span>;
  }
}
</code></pre></div><h2 id="esercizio-22">Esercizio 22</h2>
<p>Un anno di dice bisestile se è divisibile per 400, oppure se è divisibile per 4 e non per 100.</p>
<p>Si scriva una funzione contaBisestile(y1,y2), con y1 e y2 due interi positivi che rappresentano anni, con y1 &lt;= y2, restituisce il numero di anni bisestili nell&rsquo;intervallo [y1, y2].</p>
<p>Esempio:</p>
<p>contaBisestile(2020,2020) → 1</p>
<p>contaBisestile(1904,1908) → 2</p>
<p>contaBisestile(2049,2051) → 0</p>
<p>contaBisestile(0,2020) → 491</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">contaBisestile</span>(<span style="color:#a6e22e">y1</span>,<span style="color:#a6e22e">y2</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">y1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">y2</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">400</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
      <span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>;

    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>))
      <span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>;
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">count</span>;
}
</code></pre></div><h2 id="esercizio-23">Esercizio 23</h2>
<p>In matematica, un numero vampiro è un numero naturale v&gt;0 costituito da un numero pari di cifre n, tale che v = xy, e x e y sono due naturali ognuno aventi n/2 cifre, che non abbiano entrambi zeri finali, e tali che v contenga esattamente tutte le cifre contenute in x e y.
Ad esempio:
1260 è un numero vampiro, perché 1260=21 * 60.</p>
<p>125460 è un numero vampiro perché 125460 = 204 * 615 (o anche perché 125460 = 246*510)</p>
<p>Si scriva una funzione isVampire(v) che, preso come argomento un valore naturale positivo v, restituisca il valore booleano true se v è un vampire number, e false altrimenti.
SUGGERIMENTO: si utilizzi il metodo s.slice(i,j) delle stringhe, che, data una stringa s, restituisce la sottostringa di s tra l&rsquo;indice i (incluso) e j (escluso).</p>
<p>Esempio:</p>
<p>isVampire(1260) → true</p>
<p>isVampire(10) → false</p>
<p><em>Soluzione proposta da <a href="https://github.com/1boch1">1boch1</a></em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">permutation</span>(<span style="color:#a6e22e">num</span>)
{
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">num</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#66d9ef">return</span> [];

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">digits</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;&#39;</span>);

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">perms</span> <span style="color:#f92672">=</span> [];

  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">digits</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>)
  {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">permutation</span>(<span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">i</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">:</span> [<span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">i</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)];

    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span>)
    {
      <span style="color:#a6e22e">perms</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">digits</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">app</span>[<span style="color:#a6e22e">j</span>]);
    }
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">perms</span>;
}


<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">isVampire</span>(<span style="color:#a6e22e">n</span>)
{
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">n</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>; 

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">toString</span>();

  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">semiLen</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>;

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">perms</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">permutation</span>(<span style="color:#a6e22e">num</span>);

  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">perm</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">perms</span>)
  {
    <span style="color:#66d9ef">if</span>(Number(<span style="color:#a6e22e">perm</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">semiLen</span>)) <span style="color:#f92672">*</span> Number(<span style="color:#a6e22e">perm</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#a6e22e">semiLen</span>)) <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">perm</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#a6e22e">semiLen</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">semiLen</span>) <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">perm</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#a6e22e">perm</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;0&#34;</span>)) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
  }

  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
}
</code></pre></div><h2 id="esercizio-24">Esercizio 24</h2>
<p>Si consideri il problema di dover prioritizzare l&rsquo;ordine di atterraggio degli aerei sulla base del loro carburante residuo.
Un singolo aereo è rappresentato dalla proprietà (coppia chiave-valore) {iata:fuel}, dove iata è una stringa che rappresenta il codice univoco del volo e fuel è un valore numerico &gt;= 0 che rappresenta il carburante residuo.</p>
<p>Si scriva la funzione torreDiControllo(aerei), dove aerei è un array (non-ordinato) di aerei. La funzione deve ordinare gli elementi dell&rsquo;array aerei in ordine crescente di fuel (ovvero dal valore più piccolo al più grande). Si noti che il riordinamento deve necessariamente essere effettuato sul solo array aerei, senza l&rsquo;utilizzo di ulteriori array di appoggio.
La funzione non deve restituire nulla (no return).</p>
<p>Esempi:</p>
<p>aerei = [{AZ100: 56},{LH100: 0.9},{FR99: 12},{AZ800: 7}]
dopo la chiamata a torreDiControllo(aerei), aerei contiene [{LH100: 0.9},{AZ800: 7},{FR99: 12},{AZ100: 56}]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">torreDiControllo</span>(<span style="color:#a6e22e">aerei</span>) {
  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">compare</span>(<span style="color:#a6e22e">a1</span>,<span style="color:#a6e22e">a2</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">carb_a1</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">values</span>(<span style="color:#a6e22e">a1</span>)[<span style="color:#ae81ff">0</span>];
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">carb_a2</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">values</span>(<span style="color:#a6e22e">a2</span>)[<span style="color:#ae81ff">0</span>];
    
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">carb_a1</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">carb_a2</span>)
      <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
    
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">carb_a2</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">carb_a1</span>)
      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;

    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

    <span style="color:#75715e">// oppure semplicemente carb_a1 - carb_a2
</span><span style="color:#75715e"></span>  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">aerei</span>.<span style="color:#a6e22e">sort</span>(<span style="color:#a6e22e">compare</span>)
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Esercizi liberi lezioni 1-20</title>
            <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-1-20/</link>
            <pubDate>Wed, 25 Nov 2020 12:44:32 +0200</pubDate>
            
            <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-1-20/</guid>
            <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 SommAlterna Si scriva una funzione sommAlterna(a) che, dato come argomento un array di numeri a, restituisca la somma alternata degli elementi, ovvero +a0-a1+a2-a3+a4-a5… Esempi:
sommAlterna([1,2,3,4]) → -2
sommAlterna([1, -1, 1, -1]) → 4
sommAlterna([]) → 0
function sommAlterna(a) { let sum = 0; for (let i in a) { if (i % 2 == 0) sum += a[i]; else sum -= a[i]; } return sum; } SubSeq Si scriva una funzione subSeq(ago,pagliaio) che, dati come argomenti due array con elementi di qualunque tipo, restituisca true se l’array ago è una sottosequenza dell’array pagliaio (ovvero, esiste un punto all’interno di pagliaio in cui si trovano tutti gli elementi di ago, consecutivamente e nello stesso ordine) Esempi:</description>
            <content type="html"><![CDATA[<p>Per completezza, si rimanda al <a href="/posts/introduzione-al-sito/">primo post del sito</a> per ulteriori informazioni.</p>
<p>Si ricorda che dello stesso esercizio possono esistere più varianti.</p>
<hr>
<h2 id="sommalterna">SommAlterna</h2>
<p>Si scriva una funzione sommAlterna(a) che, dato come argomento un array di numeri a, restituisca la somma alternata degli elementi, ovvero +a0-a1+a2-a3+a4-a5… 
Esempi:</p>
<p>sommAlterna([1,2,3,4]) → -2</p>
<p>sommAlterna([1, -1, 1, -1]) → 4</p>
<p>sommAlterna([]) → 0</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sommAlterna</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
      <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>];
    <span style="color:#66d9ef">else</span>
      <span style="color:#a6e22e">sum</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>];
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span>;
}
</code></pre></div><h2 id="subseq">SubSeq</h2>
<p>Si scriva una funzione subSeq(ago,pagliaio) che, dati come argomenti due array con elementi di qualunque tipo, restituisca true se l’array ago è una sottosequenza dell’array pagliaio (ovvero, esiste un punto all’interno di pagliaio in cui si trovano tutti gli elementi di ago, consecutivamente e nello stesso ordine)
Esempi:</p>
<p>subSeq([1],[4,12,4,1,4]) → true</p>
<p>subSeq([1,2],[4,7,2,1,4]) → false</p>
<p>subSeq([true,false,true],[true,true,false,true,true]) → true</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">subSeq</span>(<span style="color:#a6e22e">ago</span>, <span style="color:#a6e22e">pagliaio</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">index</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pagliaio</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#a6e22e">ago</span>[<span style="color:#ae81ff">0</span>])
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">index</span> <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">ago</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>) {
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">ago</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">ago</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">pagliaio</span>[<span style="color:#a6e22e">index</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span>]) {
        <span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>;

        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">count</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">ago</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
          <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
      } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
        <span style="color:#a6e22e">index</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pagliaio</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#a6e22e">ago</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">index</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)

        <span style="color:#75715e">/* console.log(count) */</span>

        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">index</span> <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
          <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;

        <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
        <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
      }
    }
  } <span style="color:#66d9ef">else</span>
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
}
</code></pre></div><h2 id="numeri-di-tribonacci">Numeri di Tribonacci</h2>
<p>La successione Tribonacci è definita come segue: t(0)=0; t(1)=0; t(2)=1, e per ogni termine successivo vale t(n)=t(n-1)+t(n-2)+t(n-3).
Si scriva una funzione tribo(n) che calcoli e restituisca t(n).
Esempi:</p>
<p>tribo(1) → 0</p>
<p>tribo(10) → 81</p>
<p>tribo(22) → 121415</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">tribo</span>(<span style="color:#a6e22e">n</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tribo</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">tribo</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">+</span><span style="color:#a6e22e">tribo</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>);
}
</code></pre></div><h2 id="serieparziale">SerieParziale</h2>
<p>Una successione è, come sapete, una sequenza ordinata di valori, che possiamo considerare una funzione f:ℕ→ℝ. Ad ogni successione può essere associata una serie, calcolata come somma degli elementi della successione. Una serie parziale si ottiene quando il calcolo della serie si arresta a un termine di indice n dato.
Si scriva una serieParziale(f,n) che, data una funzione f come sopra, e un naturale n, restituisca la serie parziale di f limitata a n (partendo da 0, n incluso).
Esempi:</p>
<p>serieParziale(x=&gt;1, 5) → 6</p>
<p>serieParziale(x=&gt;(x%2==0?1:-1),9) → 0</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">serieParziale</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">n</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>)
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">i</span>);

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span>;
}
</code></pre></div><h2 id="serieparziale-2">SerieParziale 2</h2>
<p>Con riferimento all’esercizio precedente, si scriva una funzione serieParziale2(f) che, ricevuta una funzione f:ℕ→ℝ che rappresenta una successione, restituisca una funzione gf:ℕ→ℝ tale che gf(n) calcoli la serie parziale di f (fra 0 e n inclusi).
Esempi:</p>
<p>serieParziale2(x=&gt;1)(5) → 6</p>
<p>serieParziale2(x=&gt;(x%2==0?1:-1))(9) → 0</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">serieParziale2</span>(<span style="color:#a6e22e">f</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">x</span>) { 
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">serieParziale</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">x</span>)
  };
}

<span style="color:#75715e">// oppure
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">serieParziale2</span>(<span style="color:#a6e22e">f</span>) {
  <span style="color:#66d9ef">return</span> ((<span style="color:#a6e22e">x</span>) =&gt; <span style="color:#a6e22e">serieParziale</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">x</span>))
}
</code></pre></div><h2 id="mkmap">Mkmap</h2>
<p>Si scriva una funzione mkmap(s) che, ricevuto un array di stringhe s, restituisca un oggetto avente una proprietà i: 1 per ogni elemento s[i] di s.
Esempi:</p>
<p>mkmap([&ldquo;pippo&rdquo;,&ldquo;pluto&rdquo;]) → { pippo: 1, pluto: 1 }</p>
<p>mkmap([]) → { }</p>
<p>mkmap([&ldquo;pippo&rdquo;,&ldquo;pippo&rdquo;]) → { pippo: 1 }</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mkmap</span>(<span style="color:#a6e22e">s</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">val</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">s</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(<span style="color:#a6e22e">val</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">obj</span>))
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">val</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><h2 id="potatura">Potatura</h2>
<p>Si scriva una funzione pota(t,k) che, dato un albero binario t costruito come visto a lezione con nodi {val:v, sx:ts, dx:td}, restituisca un nuovo albero identico a t salvo che per il fatto che tutti i nodi aventi v&gt;k (e gli eventuali sottoalberi radicati in tali nodi) vengono omessi.</p>
<p><img src="../1.png" alt="Pota"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">T</span> <span style="color:#f92672">=</span> {};
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">8</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">7</span> }, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span> } }
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span> } }; 

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">pota</span>(<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">k</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span> <span style="color:#f92672">===</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">k</span>)
    <span style="color:#66d9ef">return</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">k</span>) {
    <span style="color:#66d9ef">return</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> {}, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">pota</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>, <span style="color:#a6e22e">k</span>) }
  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">k</span>) {
    <span style="color:#66d9ef">return</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> {}, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">pota</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>, <span style="color:#a6e22e">k</span>) }
  }

  <span style="color:#66d9ef">return</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">pota</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>, <span style="color:#a6e22e">k</span>), <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">pota</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>, <span style="color:#a6e22e">k</span>) }
}
</code></pre></div><h2 id="potatura-2">Potatura 2</h2>
<p>Si scriva una funzione pota2(t,k) che, dato un albero binario t costruito come visto a lezione con nodi {val:v, sx:ts, dx:td}, modifichi t rimuovendo tutti i nodi aventi v&gt;k (e gli eventuali sottoalberi radicati in tali nodi), e restituisca il numero totale di nodi rimossi (inclusi quelli nei sottoalberi).</p>
<p><img src="../2.png" alt="Pota"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">T</span> <span style="color:#f92672">=</span> {};
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">8</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">7</span> }, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span> } }
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span> } }; 

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">countT</span>(<span style="color:#a6e22e">t</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">countT</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">countT</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>);
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">pota2</span>(<span style="color:#a6e22e">t</span>,<span style="color:#a6e22e">k</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">counter</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">k</span>) {
   <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">countT</span>(<span style="color:#a6e22e">t</span>);
   <span style="color:#a6e22e">t</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">pota</span>(<span style="color:#a6e22e">t</span>,<span style="color:#f92672">-</span><span style="color:#66d9ef">Infinity</span>))
   <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">counter</span>;
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>) {
      <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">pota2</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>,<span style="color:#a6e22e">k</span>)
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>) {
      <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">pota2</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>,<span style="color:#a6e22e">k</span>)
    }
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">counter</span>;
}
</code></pre></div><h2 id="potatura-3">Potatura 3</h2>
<p>Si scriva una funzione pota3(t) che, dato un albero binario t costruito come visto a lezione con nodi {val:v, sx:ts, dx:td}, modifichi t rimuovendo tutte le foglie, sommando i valori delle foglie rimosse a quello del loro nodo padre. La funzione non deve restituire nulla.</p>
<p><img src="../3.png" alt="Pota"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">T</span> <span style="color:#f92672">=</span> {};
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">8</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">7</span> }, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span> } }
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">TREE</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">4</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span>{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">3</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span>{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">6</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span>{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>}}, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span>{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>}}, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span>{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span>{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span>{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>}, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span>{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">2</span>}}}};

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">pota3</span>(<span style="color:#a6e22e">t</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>) {
      <span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span>;
      <span style="color:#66d9ef">return</span>;
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>) {
      <span style="color:#66d9ef">if</span> ((<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>) <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>)) {
          <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>.<span style="color:#a6e22e">val</span>;
          <span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>;
      } <span style="color:#66d9ef">else</span> {
          <span style="color:#a6e22e">pota3</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>);
      }
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>) {
      <span style="color:#66d9ef">if</span> ((<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>) <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>)) {
          <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>.<span style="color:#a6e22e">val</span>;
          <span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>;
      } <span style="color:#66d9ef">else</span> {
          <span style="color:#a6e22e">pota3</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>);
      }
  }
}
</code></pre></div><h2 id="mogol">Mogol</h2>
<p>Si scriva una funzione mogol(r,p) che, dato un array di stringhe r (ciascuna delle quali è una parola) e una stringa p (anch’essa una parola), restituisca un array contenente tutti gli elementi di r che fanno rima con p. Una parola fa rima con un’altra se il suffisso della prima che parte dalla penultima vocale (inclusa) è uguale all’analogo suffisso della seconda. Si assuma che siano usate solo lettere minuscole.
Esempi:</p>
<p>mogol([&ldquo;cuore&rdquo;, &ldquo;amore&rdquo;, &ldquo;sale&rdquo;], &ldquo;sudore&rdquo;) → [&ldquo;cuore&rdquo;, &ldquo;amore&rdquo;]</p>
<p>mogol([&ldquo;cuore&rdquo;, &ldquo;amore&rdquo;, &ldquo;sale&rdquo;], &ldquo;mare&rdquo;) → []</p>
<p>mogol([&ldquo;cuore&rdquo;, &ldquo;amore&rdquo;, &ldquo;sale&rdquo;], &ldquo;male&rdquo;) → [&ldquo;sale&rdquo;]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mogol</span>(<span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">p</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> [];

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">vocali</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;i&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;u&#39;</span>]

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">suffix</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">n_vocali</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">vocali</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#a6e22e">p</span>[<span style="color:#a6e22e">i</span>]))
      <span style="color:#a6e22e">n_vocali</span><span style="color:#f92672">++</span>;
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n_vocali</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>)
      <span style="color:#66d9ef">break</span>;
  }

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n_vocali</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>;
  <span style="color:#66d9ef">else</span>
    <span style="color:#a6e22e">suffix</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#a6e22e">i</span>)

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">str</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">r</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">endsWith</span>(<span style="color:#a6e22e">suffix</span>))
      <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">str</span>);
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>;
}
</code></pre></div><h2 id="gran-mogol">Gran Mogol</h2>
<p>Si scriva una funzione granMogol(Q) che, dato un array di oggetti Q che rappresenta l’esito di una votazione, in cui ciascun oggetto ha la forma 
{ candidato: n0, votanti: [n1, …, nk] } con ni che è una stringa contenente il nome di un membro delle Giovani Marmotte, restituisca il nome del prossimo Gran Mogol, vincitore dell’elezione.
Attenzione: non vince chi prende più voti, ma solo il candidato che abbia tra i suoi votanti tutti i 3 nipoti &ldquo;Qui&rdquo;, &ldquo;Quo&rdquo; e &ldquo;Qua&rdquo;. Se nessun candidato è stato votato da tutti i 3 nipoti, la funzione deve restituire undefined. Se più candidati sono stati votati da tutti i 3 nipoti, la funzione deve restituire il primo in ordine alfabetico.
Si assuma che ogni membro delle Giovani Marmotte possa votare anche più candidati (quindi, il relativo nome può apparire in più liste di votanti).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">granMogol</span>(<span style="color:#a6e22e">Q</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">votedByNipoti</span> <span style="color:#f92672">=</span> [];

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">candidato</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">Q</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">nipoti_votanti</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">votante</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">candidato</span>[<span style="color:#e6db74">&#39;votanti&#39;</span>]) {
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">votante</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Qui&#39;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">votante</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Qua&#39;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">votante</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Quo&#39;</span>)
        <span style="color:#a6e22e">nipoti_votanti</span><span style="color:#f92672">++</span>;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">nipoti_votanti</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span>)
      <span style="color:#a6e22e">votedByNipoti</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">candidato</span>[<span style="color:#e6db74">&#39;candidato&#39;</span>]);
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">votedByNipoti</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">votedByNipoti</span>.<span style="color:#a6e22e">sort</span>()[<span style="color:#ae81ff">0</span>]
  } <span style="color:#66d9ef">else</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">votedByNipoti</span>[<span style="color:#ae81ff">0</span>];
}

<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">test</span> <span style="color:#f92672">=</span> [{ <span style="color:#a6e22e">candidato</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;pippo&#39;</span>, <span style="color:#a6e22e">votanti</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;pluto&#39;</span>, <span style="color:#e6db74">&#39;paperino&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>] }]

<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">voti</span> <span style="color:#f92672">=</span> [{ <span style="color:#a6e22e">candidato</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;bbb&#34;</span>, <span style="color:#a6e22e">votanti</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;Quo&#34;</span>, <span style="color:#e6db74">&#34;fff&#34;</span>, <span style="color:#e6db74">&#34;Qui&#34;</span>, <span style="color:#e6db74">&#34;Qua&#34;</span>] }, { <span style="color:#a6e22e">candidato</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;zzz&#34;</span>, <span style="color:#a6e22e">votanti</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;Quo&#34;</span>, <span style="color:#e6db74">&#34;Qui&#34;</span>, <span style="color:#e6db74">&#34;Qua&#34;</span>, <span style="color:#e6db74">&#34;aaaa&#34;</span>] }, { <span style="color:#a6e22e">candidato</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;ccc&#34;</span>, <span style="color:#a6e22e">votanti</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;gfgf&#34;</span>, <span style="color:#e6db74">&#34;vvbv&#34;</span>, <span style="color:#e6db74">&#34;vcbdvcbd&#34;</span>] }];

<span style="color:#a6e22e">granMogol</span>(<span style="color:#a6e22e">voti</span>)
</code></pre></div><h2 id="zip">Zip</h2>
<p>Si scriva una funzione zip(o) che, ricevuto un oggetto qualunque o, restituisca un array così fatto: per ogni proprietà p = chiave: valore di o, l’array deve contenere come elemento la coppia [chiave, valore] rappresentata come array di 2 elementi.
L’array risultante deve essere ordinato alfabeticamente per chiave.
Esempi:</p>
<p>zip({a:1, b:true}) → [ [&ldquo;a&rdquo;,1], [&ldquo;b&rdquo;, true] ]</p>
<p>zip({b:true, a:1}) → [ [&ldquo;a&rdquo;,1], [&ldquo;b&rdquo;, true] ]</p>
<p>zip({}) → []</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">zip</span>(<span style="color:#a6e22e">o</span>) {
  <span style="color:#66d9ef">return</span> Object.<span style="color:#a6e22e">entries</span>(<span style="color:#a6e22e">o</span>).<span style="color:#a6e22e">sort</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">b</span>[<span style="color:#ae81ff">0</span>])
      <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">b</span>[<span style="color:#ae81ff">0</span>])
      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  })
}
</code></pre></div><h2 id="unzip">Unzip</h2>
<p>Con riferimento all’esercizio precedente, si scriva una funzione unzip(a) che, ricevuto un array di coppie come restituito da zip, restituisca a sua volta l’oggetto corrispondente, applicando la trasformazione inversa.
Esempi:</p>
<p>unzip([[&ldquo;a&rdquo;,1], [&ldquo;b&rdquo;, true]]) → {a:1, b:true}</p>
<p>unzip([]) → {}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">unzip</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">a</span>) {
    <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">arr</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">arr</span>[<span style="color:#ae81ff">1</span>];
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><h2 id="visita">Visita</h2>
<p>Si scriva una funzione visita(t,f) che, dato un albero binario t costruito come visto a lezione con nodi {val:v, sx:ts, dx:td}, e una funzione f, modifichi l’albero sostituendo il val di ogni nodo con il risultato di f applicata al valore precedente. La funzione non restituisce nulla.</p>
<p><img src="../4.png" alt="Pota"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">visita</span>(<span style="color:#a6e22e">t</span>,<span style="color:#a6e22e">f</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span>;

  <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span>);
  <span style="color:#a6e22e">visita</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>,<span style="color:#a6e22e">f</span>);
  <span style="color:#a6e22e">visita</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>,<span style="color:#a6e22e">f</span>);
}
</code></pre></div><h2 id="visita-2">Visita 2</h2>
<p>Si scriva una funzione visita2(t,f) che, dato un albero binario t costruito come visto a lezione con nodi {val:v, sx:ts, dx:td}, e una funzione f, restituisca un nuovo albero ottenuto sostituendo il val di ogni nodo con il risultato di f applicata al valore precedente. L’albero originale non deve essere modificato.</p>
<p><img src="../5.png" alt="Visita"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">T</span> <span style="color:#f92672">=</span> {};
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">8</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">7</span> }, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span> } }
<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span>, <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span> } }; 

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">visita2</span>(<span style="color:#a6e22e">t</span>,<span style="color:#a6e22e">f</span>) {  
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span>;

  <span style="color:#66d9ef">return</span> {<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span>), <span style="color:#a6e22e">sx</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">visita2</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">sx</span>,<span style="color:#a6e22e">f</span>), <span style="color:#a6e22e">dx</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">visita2</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">dx</span>,<span style="color:#a6e22e">f</span>)};
}
</code></pre></div><h2 id="funprop">Funprop</h2>
<p>Si scriva una funzione funprop(f,p) che, date due funzioni f:ℕ→ℝ e p:ℝ→𝔹 (dove 𝔹 rappresenta il dominio dei booleani), restituisca una funzione s(a,b) la quale, ricevuti due interi a e b con a≤b, restituisca un array ordinato di tutti gli interi k∈[a,b] in cui f soddisfa p. Se p non viene fornito, si considera sempre soddisfatto.
Esempi:</p>
<p>funprop(n=&gt;2*n,n=&gt;n%2==0)(4,6) → [4, 5, 6]</p>
<p>funprop(n=&gt;2*n,n=&gt;n&gt;10)(4,8) → [6,7,8]</p>
<p>funprop(n=&gt;n,n=&gt;n%2==1)(10,20) → [11,13,15,17,19]</p>
<p>funprop(n=&gt;n*n)(4,6) → [4,5,6]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">funprop</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">n</span>) =&gt; (<span style="color:#66d9ef">true</span>)) {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">s</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> [];
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">b</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
      <span style="color:#a6e22e">num</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">i</span>);
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">p</span>(<span style="color:#a6e22e">num</span>)) <span style="color:#75715e">// nel caso di default non viene valutata ma restituisce solamente true
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">i</span>);
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arr</span>;
  }
}
</code></pre></div><h2 id="selapply">SelApply</h2>
<p>Si scriva una funzione selApply(f,p) che, date due funzioni f:ℕ→ℝ e p:ℝ→𝔹 (dove 𝔹 rappresenta il dominio dei booleani), restituisca una funzione s(a) così definita: per ogni elemento ai di a (che sarà un array di naturali), verifica se l’elemento soddisfa p; in caso positivo, rimpiazzalo con f(ai), altrimenti lascia ai. La funzione s modifica l’array a cui è applicata.
Esempi:
se a=[1,2,3,4],</p>
<p>selApply(n=&gt;n*n,n=&gt;n%2==0)(a); 	a → [1,4,3,16]</p>
<p>selApply(n=&gt;0,n=&gt;n&gt;2)(a);			a → [1,2,0,0]</p>
<p>selApply(n=&gt;n,n=&gt;n&gt;0)(a);			a → [1,2,3,4]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">selApply</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">p</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
      <span style="color:#a6e22e">num</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>])
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">p</span>(<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]))
        <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">num</span>;
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>;
  }
}
</code></pre></div><h2 id="isheap">isHeap</h2>
<p>Si scriva una funzione isHeap(t) che, dato un albero k-ario t costruito come visto a lezione con nodi {val:v, figli: [t1, …, tn]}, restituisca true se l’albero soddisfa la proprietà di heap, ovvero il valore del padre è sempre maggiore del valore di ciascuno dei figli</p>
<p><img src="../6.png" alt="Heap"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">T</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">figli</span><span style="color:#f92672">:</span> []}
  <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">val</span><span style="color:#f92672">=</span><span style="color:#ae81ff">9</span>
  <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">figli</span><span style="color:#f92672">=</span>[{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">8</span>, <span style="color:#a6e22e">figli</span><span style="color:#f92672">:</span>[{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">7</span>},{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>},{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">3</span>}]},{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">6</span>, <span style="color:#a6e22e">figli</span><span style="color:#f92672">:</span>[{<span style="color:#a6e22e">val</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>}]}]

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">isHeap</span>(<span style="color:#a6e22e">t</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
  
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">figli</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>; <span style="color:#75715e">// è un heap se ho un albero con un solo nodo
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">figlio</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">figli</span>)
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">figlio</span>.<span style="color:#a6e22e">val</span>)
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
  <span style="color:#75715e">// Se sono qui sono tutti più piccoli
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">figlio</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">figli</span>)
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isHeap</span>(<span style="color:#a6e22e">figlio</span>))
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
  
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
}
</code></pre></div><h2 id="semplifica">Semplifica</h2>
<p>Si scriva una funzione semplifica(ao,ak) che, ricevuto un array di oggetti ao, e un array di stringhe ak, &ldquo;semplifichi&rdquo; gli oggetti contenuti in ao in modo da eliminare in ciascun oggetto tutte le proprietà le cui chiavi non compaiono nell’elenco di ak. La funzione deve restituire il numero complessivo di proprietà eliminate.
Si cerchi di realizzare un’implementazione efficiente, dal punto di vista algoritmico.
Esempi:</p>
<p>o = {a:12, q: 3}; ao=[ { a:1, b:3}, {a:5, c: 7}, {q:4, d:true}, o ]</p>
<p>semplifica(ao,[&ldquo;q&rdquo;,&ldquo;c&rdquo;]) → 5</p>
<p>ao → [ {}, {c:7}, {q:4}, {q:3} ]</p>
<p>o → {q:3}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span><span style="color:#f92672">=</span> {<span style="color:#a6e22e">a</span><span style="color:#f92672">:</span><span style="color:#ae81ff">12</span>, <span style="color:#a6e22e">q</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>};
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ao</span><span style="color:#f92672">=</span>[ { <span style="color:#a6e22e">a</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">b</span><span style="color:#f92672">:</span><span style="color:#ae81ff">3</span>}, {<span style="color:#a6e22e">a</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>, <span style="color:#a6e22e">c</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">7</span>}, {<span style="color:#a6e22e">q</span><span style="color:#f92672">:</span><span style="color:#ae81ff">4</span>, <span style="color:#a6e22e">d</span><span style="color:#f92672">:</span><span style="color:#66d9ef">true</span>}, {<span style="color:#a6e22e">a</span><span style="color:#f92672">:</span><span style="color:#ae81ff">12</span>, <span style="color:#a6e22e">q</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>}]

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">semplifica</span>(<span style="color:#a6e22e">ao</span>,<span style="color:#a6e22e">ak</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">ao</span>)
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">obj</span>)
      <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">ak</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#a6e22e">key</span>)) {
          <span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">key</span>]
          <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>;
        }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">counter</span>;
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Esercizi ricorsione</title>
            <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-ricorsione/</link>
            <pubDate>Tue, 17 Nov 2020 12:16:50 +0200</pubDate>
            
            <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-ricorsione/</guid>
            <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
Fattoriale Si scriva una funzione fattoriale(n) che, dato come argomento un intero positivo, restituisca il suo fattoriale. Esempi:
fattoriale(1) → 1
fattoriale(5) → 120
fattoriale(10) → 3628800
function fattoriale(n) { if (n&amp;lt;=1) return 1; return n * fattoriale(n-1); } function fattoriale_tailrec(n,acc = 1) { if (n &amp;lt;= 1) return acc; return fattoriale_tailrec(n-1,acc * n); } // fattoriale_tailrec(10) → 3628800 Numeri triangolari Realizzare una funzione ricorsiva che, dato un intero &amp;gt;=0 n, calcoli il valore dell’ennesimo numero triangolare.</description>
            <content type="html"><![CDATA[<p>Per completezza, si rimanda al <a href="/posts/introduzione-al-sito/">primo post del sito</a> per ulteriori informazioni.</p>
<p>Si ricorda che dello stesso esercizio possono esistere più varianti.</p>
<h2 id="fattoriale">Fattoriale</h2>
<p>Si scriva una funzione fattoriale(n) che, dato come argomento un intero positivo, restituisca il suo fattoriale.
Esempi:</p>
<p>fattoriale(1) → 1</p>
<p>fattoriale(5) → 120</p>
<p>fattoriale(10) → 3628800</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fattoriale</span>(<span style="color:#a6e22e">n</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span><span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">1</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">fattoriale</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fattoriale_tailrec</span>(<span style="color:#a6e22e">n</span>,<span style="color:#a6e22e">acc</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">acc</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fattoriale_tailrec</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#a6e22e">acc</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">n</span>);
}

<span style="color:#75715e">// fattoriale_tailrec(10) → 3628800
</span></code></pre></div><h2 id="numeri-triangolari">Numeri triangolari</h2>
<p>Realizzare una funzione ricorsiva che, dato un intero &gt;=0 n, calcoli il valore dell’ennesimo numero triangolare. 
Esempi:</p>
<p>triangle(3) → 6</p>
<p>triangle(6) → 21</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">triangle</span>(<span style="color:#a6e22e">n</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span><span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">1</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">triangle</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">triangleCoda</span>(<span style="color:#a6e22e">n</span>,<span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span><span style="color:#f92672">&lt;</span><span style="color:#ae81ff">1</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>;
  }

  <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">s</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">triangleCoda</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#a6e22e">s</span>));
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>;
}
</code></pre></div><h2 id="cifre">Cifre</h2>
<p>Si scriva una funzione ricorsiva cifre(n) che, dato come argomento un intero positivo, mostri a video le sue cifre, una per riga.
Esempi:</p>
<p>cifre(2563) → 2 5 6 3</p>
<p>cifre(5) → 5</p>
<p>cifre(98763) → 9 8 7 6 3</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">cifre</span>(<span style="color:#a6e22e">n</span>) {
	<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>)
		<span style="color:#66d9ef">return</span>;
	
	<span style="color:#a6e22e">cifre</span>(Math.<span style="color:#a6e22e">floor</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">/</span><span style="color:#ae81ff">10</span>));
	<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">%</span><span style="color:#ae81ff">10</span>);
}
</code></pre></div><h2 id="cifre-in-ordine-inverso">Cifre in ordine inverso</h2>
<p>Si scriva una funzione ricorsiva cifreInv(n) che, dato come argomento un intero positivo, mostri a video le sue cifre, in ordine inverso, una per riga.
Esempi:</p>
<p>cifreInv(2563) → 3 6 5 2</p>
<p>cifreInv(5) → 5</p>
<p>cifreInv(98763) → 3 6 7 8 9</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">cifreInv</span>(<span style="color:#a6e22e">n</span>) {
	<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>)
		<span style="color:#66d9ef">return</span>;

  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">%</span><span style="color:#ae81ff">10</span>);
	<span style="color:#a6e22e">cifreInv</span>(Math.<span style="color:#a6e22e">floor</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">/</span><span style="color:#ae81ff">10</span>));
}
</code></pre></div><h2 id="somma-cifre">Somma cifre</h2>
<p>Si scriva una funzione ricorsiva sommaCifre(n) che, dato come argomento un intero positivo, restituisca la somma delle sue cifre.
Esempi:</p>
<p>sommaCifre(2563) → 16</p>
<p>sommaCifre(5) → 5</p>
<p>sommaCifre(98763) → 33</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sommaCifre</span>(<span style="color:#a6e22e">n</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">sommaCifre</span>(Math.<span style="color:#a6e22e">floor</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">/</span><span style="color:#ae81ff">10</span>));
}
</code></pre></div><h2 id="somma-array">Somma array</h2>
<p>Si scriva una funzione ricorsiva sommaArray(a) che, dato come argomento un array di interi, restituisca la somma dei suoi elementi.
Esempi:</p>
<p>sommaArray([3,6,1,3]) → 13</p>
<p>sommaArray([46,-1,-45, 0,2 -4, 3,-1]) → 0</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sommaArray</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">pop</span>() <span style="color:#f92672">+</span> <span style="color:#a6e22e">sommaArray</span>(<span style="color:#a6e22e">a</span>);
}
</code></pre></div><h2 id="sequenza-crescente">Sequenza crescente</h2>
<p>Realizzare una funzione ricorsiva che controlli che un array di numeri interi positivi dato in input sia ordinato in ordine strettamente crescente. 
Esempi:</p>
<p>ordinato([1,5,9,12,56,57,29]) → true</p>
<p>ordinato([7]) → true</p>
<p>ordinato([3,7,5,8,9,10]) → false</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">ordinato</span>(<span style="color:#a6e22e">a</span>) {
	<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
	
	<span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">ordinato</span>(<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">1</span>));
}
</code></pre></div><h2 id="fibonacci">Fibonacci</h2>
<p>Realizzare una funzione ricorsiva fib che, dato un intero positivo n, restituisca l’ennesimo numero nella serie di Fibonacci: F(0)=0; F(1)=1; F(n)=F(n-1)+F(n-2), n&gt;=2 
Esempi:</p>
<p>fib(5) → 5</p>
<p>fib(7) → 13</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fib</span>(<span style="color:#a6e22e">n</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fib</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">fib</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>);
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fib_tailrec</span>(<span style="color:#a6e22e">n</span>)
{
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">i</span>;
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>;

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>)
  {
     <span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
     <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">b</span>;
     <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>;
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>;
}
</code></pre></div><h2 id="piastrelle">Piastrelle</h2>
<p>Dobbiamo piastrellare una sentiero largo 1m con delle piastrelle che esistono in 2 dimensioni: 1 × 1 m o 1 × 2 m. Quelle da 1 × 1 possono essere rosse o blu, quelle da 1 × 2 possono essere gialle, verdi o nere. Se il sentiero è lungo n metri, in quanti modi diversi può essere piastrellato? Scrivere una funzione contaPossibilita(n) che restituisca il numero di possibilità, data la lunghezza n. Suggerimento: trovare una relazione ricorsiva per calcolare il numero di possibilità, poi implementare la funzione in modo ricorsivo (preferibilmente in coda.
Esempi:</p>
<p>contaPossibilita(1) → 2</p>
<p>contaPossibilita(7) → 1640</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">piastrelle</span>(<span style="color:#a6e22e">n</span>) {
	<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)
		<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">2</span>;

	<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>)
		<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">7</span>;
	
	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">piastrelle</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#a6e22e">piastrelle</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>);
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">piastrelleCoda</span>(<span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">p1</span><span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>,<span style="color:#a6e22e">p2</span><span style="color:#f92672">=</span><span style="color:#ae81ff">7</span>){
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p1</span>;
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">piastrelleCoda</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#a6e22e">p2</span>,<span style="color:#a6e22e">p1</span><span style="color:#f92672">*</span><span style="color:#ae81ff">3</span><span style="color:#f92672">+</span><span style="color:#a6e22e">p2</span><span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>);
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>03 - Compito in classe</title>
            <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-03-classe/</link>
            <pubDate>Fri, 13 Nov 2020 17:31:18 +0200</pubDate>
            
            <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/compito-03-classe/</guid>
            <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Esercizio 03.1 - Array Si scriva una funzione calcola(a) che, dato un array di interi a, restituisca la somma dei quadrati degli elementi di a.
function calcola(a) { let sum = 0; for (let i in a) sum += a[i]**2; return sum; } // calcola([-21,32,0,99,101,101,2,76,22,1349]) → 1857733  // calcola([0,0,12,-66,9]) → 4581  // calcola([1,2,3,4,5,6]) → 91 Esercizio 03.</description>
            <content type="html"><![CDATA[<p>Per completezza, si rimanda al <a href="Lab1-20-21/posts/introduzione-al-sito/">primo post del sito</a> per ulteriori informazioni.</p>
<p>Si ricorda che dello stesso esercizio possono esistere più varianti.</p>
<hr>
<h2 id="esercizio-031---array">Esercizio 03.1 - Array</h2>
<p>Si scriva una funzione calcola(a) che, dato un array di interi a, restituisca la somma dei quadrati degli elementi di a.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">calcola</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">a</span>)
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span>;
}

<span style="color:#75715e">// calcola([-21,32,0,99,101,101,2,76,22,1349]) → 1857733
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// calcola([0,0,12,-66,9]) → 4581
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// calcola([1,2,3,4,5,6]) → 91
</span></code></pre></div><h2 id="esercizio-032---elimina-elementi">Esercizio 03.2 - Elimina elementi</h2>
<p>Si scriva una funzione cancellaConSoglia(a,n) che dato un array di interi a e un intero n, rimuova da a tutti gli elementi ≤ (minori di o uguali a) n e restituisca l&rsquo;array risultante.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">cancellaConSoglia</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">n</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">filter</span>((<span style="color:#a6e22e">elem</span>) =&gt; (<span style="color:#a6e22e">elem</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">n</span>));
}

<span style="color:#75715e">// cancellaConSoglia([-21,32,0,99,101,101,2,76,22,1349],101) → [1349]
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// cancellaConSoglia([0,0,12,-66,9],0) → [12,9]
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// cancellaConSoglia([1,2,3,4,5,6],3) → [4,5,6]
</span></code></pre></div><h2 id="esercizio-033---band-of-brothers">Esercizio 03.3 - Band of Brothers</h2>
<p>Si scriva una funzione contaCoppia(T,val1,val2) che dato un albero binario T (i cui nodi sono implementati come visto a lezione come oggetti con chiavi val, sx e dx) e due numeri val1 e val2, restituisca il numero di coppie di nodi fratelli tali che il fratello destro abbia val uguale a val1 e quello sinistro abbia val uguale a val2. Due nodi sono fratelli se sono figli dello stesso nodo padre. Si faccia attenzione a conteggiare le coppie che soddisfano la condizione, non il numero dei nodi (che sarebbe ovviamente il doppio rispetto al numero di coppie).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">contaCoppia</span>(<span style="color:#a6e22e">T</span>,<span style="color:#a6e22e">val1</span>,<span style="color:#a6e22e">val2</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">undefined</span> <span style="color:#f92672">||</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>))
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>)
    <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">val2</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">val1</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">contaCoppia</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>,<span style="color:#a6e22e">val1</span>,<span style="color:#a6e22e">val2</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">contaCoppia</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>,<span style="color:#a6e22e">val1</span>,<span style="color:#a6e22e">val2</span>);

  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">contaCoppia</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">sx</span>,<span style="color:#a6e22e">val1</span>,<span style="color:#a6e22e">val2</span>);
  <span style="color:#66d9ef">else</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">contaCoppia</span>(<span style="color:#a6e22e">T</span>.<span style="color:#a6e22e">dx</span>,<span style="color:#a6e22e">val1</span>,<span style="color:#a6e22e">val2</span>);
}

<span style="color:#75715e">// contaCoppia({val:7,sx:{val: 4, sx: {val: 3}, dx: {val:12, sx: {val: 4, dx:{val:3}, sx:{val: 8}}}}, dx:{val: 11, dx: {val: 3}, sx: {val:8, sx: {val: 6}}}},12,3) → 1
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// contaCoppia({val:7,sx:{val: 4, sx: {val: 3}, dx: {val:12, sx: {val: 4, dx:{val:3}, sx:{val: 8}}}}, dx:{val: 11, dx: {val: 3}, sx: {val:8, sx: {val: 6}}}},3,8) → 2
</span></code></pre></div><h2 id="esercizio-034---blue-tuesday">Esercizio 03.4 - Blue Tuesday</h2>
<p>Si scriva una funzione rudyGiuliani(trump,biden,votiLegali) che dati 3 insiemi (trump, biden e votiLegali) rappresentati come oggetti, restituisca (con la stessa rappresentazione) l&rsquo;insieme contenente sia gli elementi di votiLegali presenti in trump ma non appartenenti a biden che gli elementi di votiLegali presenti in biden ma non appartenenti a trump.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">rudyGiuliani</span>(<span style="color:#a6e22e">trump</span>,<span style="color:#a6e22e">biden</span>,<span style="color:#a6e22e">votiLegali</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#75715e">// elementi di votiLegali presenti in trump ma non appartenenti a biden
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">votiLegali</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">trump</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>(<span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">biden</span>))
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">elem</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">votiLegali</span>[<span style="color:#a6e22e">elem</span>];
  }

  <span style="color:#75715e">// elementi di votiLegali presenti in biden ma non appartenenti a trump
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">votiLegali</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">biden</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>(<span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">trump</span>))
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">elem</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">votiLegali</span>[<span style="color:#a6e22e">elem</span>];
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}

<span style="color:#a6e22e">trump</span> <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;forcoli&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;lacalifornia&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;frittole&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;freddana&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;bugliano&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;newfollonica&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>}
<span style="color:#a6e22e">biden</span> <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;calafuria&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;pappiana&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;forcoli&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;lacalifornia&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;massachuccoli&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;lajatico&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;newfollonica&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>}
<span style="color:#a6e22e">votiLegali</span> <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;calafuria&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;pappiana&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;forcoli&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;massachuccoli&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;larderello&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;lajatico&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;frittole&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;freddana&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;bugliano&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;orentano&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;newfollonica&#39;</span><span style="color:#f92672">:</span><span style="color:#ae81ff">1</span>}
<span style="color:#a6e22e">rudyGiuliani</span>(<span style="color:#a6e22e">trump</span>,<span style="color:#a6e22e">biden</span>,<span style="color:#a6e22e">votiLegali</span>) <span style="color:#75715e">// → {&#39;calafuria&#39;:1, &#39;pappiana&#39;:1, &#39;massachuccoli&#39;:1, &#39;lajatico&#39;:1, &#39;frittole&#39;:1, &#39;freddana&#39;:1, &#39;bugliano&#39;:1}
</span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Esercizi liberi lezioni 1-14</title>
            <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-1-14/</link>
            <pubDate>Thu, 12 Nov 2020 00:48:06 +0200</pubDate>
            
            <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/esercizi-liberi-1-14/</guid>
            <description>Per completezza, si rimanda al primo post del sito per ulteriori informazioni.
Si ricorda che dello stesso esercizio possono esistere più varianti.
 Produttoria Si scriva una funzione produttoria(a,b) che, dati come argomenti due interi positivi a e b, con a ≤ b, restituisca il prodotto di tutti gli interi fra a e b, estremi compresi. Esempi:
produttoria(4,6) → 120
produttoria(10,10) → 10
produttoria(10,11) → 110
function produttoria(a,b) { let n = 1; for (let i = a; i &amp;lt;= b; i++) { n *= i; } return n; } Quaterne Si scriva una funzione quaterne(a,b) che, dati come argomenti due interi a e b, con a ≤ b, restituisca il numero di quaterne (cioè sequenze distinte di quattro numeri consecutivi) comprese fra a e b, estremi esclusi.</description>
            <content type="html"><![CDATA[<p>Per completezza, si rimanda al <a href="/posts/introduzione-al-sito/">primo post del sito</a> per ulteriori informazioni.</p>
<p>Si ricorda che dello stesso esercizio possono esistere più varianti.</p>
<hr>
<h2 id="produttoria">Produttoria</h2>
<p>Si scriva una funzione produttoria(a,b) che, dati come argomenti due interi positivi a e b, con a ≤ b, restituisca il prodotto di tutti gli interi fra a e b, estremi compresi.
Esempi:</p>
<p>produttoria(4,6) → 120</p>
<p>produttoria(10,10) → 10</p>
<p>produttoria(10,11) → 110</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">produttoria</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">b</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">*=</span> <span style="color:#a6e22e">i</span>; 
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span>;
}
</code></pre></div><h2 id="quaterne">Quaterne</h2>
<p>Si scriva una funzione quaterne(a,b) che, dati come argomenti due interi a e b, con a ≤ b, restituisca il numero di quaterne (cioè sequenze distinte di quattro numeri consecutivi) comprese fra a e b, estremi esclusi.
Esempi:</p>
<p>quaterne(4,6) → 0</p>
<p>quaterne(4,10) → 2 (sono: 5/6/7/8 e 6/7/8/9)</p>
<p>quaterne(-4,10) → 10 (sono -3/-2/-1/0, -2/-1/0/1, … , 5/6/7/8, 6/7/8/9)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">quaterne</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">b</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">n_quaterne</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">b</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#66d9ef">if</span> ((<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">b</span>)
      <span style="color:#a6e22e">n_quaterne</span><span style="color:#f92672">++</span>;
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n_quaterne</span>;
}
</code></pre></div><h2 id="numeri-perfetti">Numeri perfetti</h2>
<p>Un numero naturale n si dice perfetto se è uguale alla somma dei propri divisori propri (ovvero, tutti i suoi divisori positivi escluso n). Si scriva una funzione perfetto(n) che, dato un numero naturale n, restituisca true se n è perfetto, false altrimenti.
Esempi:</p>
<p>perfetto(6) → true (infatti 1+2+3 = 6)</p>
<p>perfetto(10) → false (infatti 1+2+5 ≠ 10)</p>
<p>perfetto(28) → true (infatti 1+2+4+7+14 = 28)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">perfetto</span>(<span style="color:#a6e22e">n</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">divisori</span> <span style="color:#f92672">=</span> [];
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">tot</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
      <span style="color:#a6e22e">divisori</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">i</span>);
  }

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">divisori</span>)
    <span style="color:#a6e22e">tot</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">divisori</span>[<span style="color:#a6e22e">i</span>];

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tot</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span>;
}
</code></pre></div><h2 id="range">Range</h2>
<p>Si scriva una funzione range(a,b) che, dati due interi a e b restituisca un array ordinato di interi, contenente tutti e soli gli interi i tali che a ≤ i e i ≤ b.
Esempi:</p>
<p>range(2,6) → [2, 3, 4, 5, 6]</p>
<p>range(10,10) → [10]</p>
<p>range(-5, 1) → [-5, -4, -3, -2, -1, 0, 1]</p>
<p>range(10, 4) → []</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">range</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> [];

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">b</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
      <span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">i</span>);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arr</span>;
}
</code></pre></div><h2 id="penultimo">Penultimo</h2>
<p>Si scriva una funzione penultimo(a) che, dato un array di stringhe a, restituisca la penultima stringa secondo l’ordine alfabetico fra quelle presenti nell’array, oppure undefined se non esiste una penultima.
Esempi:</p>
<p>penultimo([&ldquo;pera&rdquo;, &ldquo;zucca&rdquo;, &ldquo;mela&rdquo;]) → &ldquo;pera&rdquo;</p>
<p>penultimo([&ldquo;dattero&rdquo;, &ldquo;zucca&rdquo;, &ldquo;mela&rdquo;]) → &ldquo;mela&rdquo;</p>
<p>penultimo([&ldquo;zucca&rdquo;]) → undefined</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">penultimo</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">undefined</span>;

  <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">sort</span>();
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>];
}
</code></pre></div><h2 id="ordinamento-per-lunghezza">Ordinamento per lunghezza</h2>
<p>Si scriva una funzione ordlun(a) che, dato un array di stringhe a, restituisca un array contenente le stesse stringhe, ordinate secondo la loro lunghezza (dalla più breve alla più lunga); a parità di lunghezza, andranno ordinate secondo l’ordine alfabetico.
Esempi:</p>
<p>ordlun([&ldquo;pera&rdquo;, &ldquo;zucca&rdquo;, &ldquo;mela&rdquo;]) → [&ldquo;mela&rdquo;, &ldquo;pera&rdquo;, &ldquo;zucca&rdquo;]</p>
<p>ordlun([&ldquo;dattero&rdquo;, &ldquo;zucca&rdquo;, &ldquo;mela&rdquo;]) → [&ldquo;mela&rdquo;, &ldquo;zucca&rdquo;, &ldquo;dattero&rdquo;]</p>
<p>ordlun([]) → []</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">ordlun</span>(<span style="color:#a6e22e">a</span>) {

  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">compare</span>(<span style="color:#a6e22e">str1</span>,<span style="color:#a6e22e">str2</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">len1</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">str1</span>.<span style="color:#a6e22e">length</span>;
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">len2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">str2</span>.<span style="color:#a6e22e">length</span>;

    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">len1</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">len2</span>)
      <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">len1</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">len2</span>)
      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">else</span> {
      <span style="color:#75715e">// stessa lunghezza delle 2 stringhe =&gt; ordinamento lessicografico
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">str1</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">str2</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
    }
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">sort</span>(<span style="color:#a6e22e">compare</span>);
}
</code></pre></div><h2 id="multiinsiemi---conversione">Multiinsiemi - conversione</h2>
<p>Un multiinsieme è una generalizzazione del concetto di insieme in cui lo stesso elemento può apparire più volte. Si potrebbe rappresentare un multiinsieme come un array, per esempio: [4, 7, 10, 4, 9, 7, 4]. Lo si potrebbe anche rappresentare come un oggetto, in cui gli elementi sono le chiavi, e i corrispondenti valori indicano quante volte compare quell’elemento. L’array precedente può dunque essere rappresentato come { 4: 3, 7: 2, 9: 1, 10: 1}.</p>
<p>Si scriva una funzione cvtmi(a) che, data la rappresentazione ad array di un multiinsieme (di interi o stringhe), restituisca la corrispondente rappresentazione a oggetto.
Esempi:</p>
<p>cvtmi([&ldquo;pera&rdquo;, &ldquo;zucca&rdquo;, &ldquo;mela&rdquo;]) → { mela: 1, pera: 1, zucca: 1}</p>
<p>cvtmi([&ldquo;pera&rdquo;, &ldquo;pera&rdquo;, &ldquo;pera&rdquo;, &ldquo;zucca&rdquo;]) → {pera: 3, zucca: 1}</p>
<p>cvtmi([1,2,3,4,3,4,5,2,1,1,9]) → {1:3, 2:2, 3:2, 4:2, 5:1, 9:1}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">cvtmi</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">obj</span>)
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">else</span>
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><h2 id="multiinsiemi---unione-e-intersezione">Multiinsiemi - unione e intersezione</h2>
<p>Si scrivano due funzioni: unionemi(a,b) che, dati due oggetti a e b che rappresentano multiinsiemi, come definiti nell’esercizio precedente, restituisca un oggetto che rappresenta l’unione dei due multiinsiemi, e intersezionemi(a,b) che allo stesso modo restituisce l’intersezione fra i due multiinsiemi.
Esempi:</p>
<p>unionemi({1:4, 2:1},{1:3, 3:1}) → {1:7, 2:1, 3:1}</p>
<p>intersezionemi({1:4, 2:1},{1:3, 3:1}) → {1:3}</p>
<p>intersezionemi({1:4, 2:1},{}) → {}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">unionemi</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">e</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">a</span>)
    <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">e</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">e</span>];

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">e</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">b</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">e</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">obj</span>)
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">e</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">e</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>[<span style="color:#a6e22e">e</span>];
    <span style="color:#66d9ef">else</span> 
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">e</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">b</span>[<span style="color:#a6e22e">e</span>];
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">intersezionemi</span>(<span style="color:#a6e22e">a</span>,<span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {};

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">e</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">e</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">b</span>)
      <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">e</span>] <span style="color:#f92672">=</span> (<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">e</span>] <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">b</span>[<span style="color:#a6e22e">e</span>] <span style="color:#f92672">?</span> <span style="color:#a6e22e">b</span>[<span style="color:#a6e22e">e</span>] <span style="color:#f92672">:</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">e</span>]);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><h2 id="conta-vocali">Conta vocali</h2>
<p>Si scriva una funzione contaVocali(s) che, data una stringa s, restituisca il numero totale di vocali (lettere a, e, i, o, u, sia maiuscole che minuscole) presenti in s.
Esempi:</p>
<p>contaVocali(&ldquo;Ai lati d’Italia&rdquo;) → 8</p>
<p>contaVocali(&ldquo;qwerty&rdquo;) → 1</p>
<p>contaVocali(&ldquo;3463234&rdquo;) → 0</p>
<p>contaVocali(&ldquo;Nel mezzo del cammin di nostra vita&rdquo;) → 11</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">contaVocali</span>(<span style="color:#a6e22e">s</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">vocali</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>];

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">s</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">vocali</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#66d9ef">char</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">vocali</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#66d9ef">char</span>.<span style="color:#a6e22e">toLowerCase</span>()))
      <span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>;
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">count</span>;
}
</code></pre></div><h2 id="una-firma-atipica">Una firma atipica</h2>
<p>Si scriva una funzione firma(s) che, data una stringa s, restituisca un intero positivo k calcolato come segue: si immagini di sostituire ogni vocale (maiuscola o minuscola) o spazio in s con 1, e qualunque altro carattere con 0. Si consideri poi la stringa risultante come un numero binario, e sia k il suo valore.
Esempi:</p>
<p>firma(&ldquo;Vincenzo Gervasi&rdquo;) → 18853</p>
<p>firma(&ldquo;Alina Sirbu&rdquo;) → 1385</p>
<p>firma(&quot;&quot;) → 0</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">firma</span>(<span style="color:#a6e22e">s</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">bin</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">vocali</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39; &#39;</span>];

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#75715e">// risultato finale
</span><span style="color:#75715e"></span>  
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">s</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">vocali</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#66d9ef">char</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">vocali</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#66d9ef">char</span>.<span style="color:#a6e22e">toLowerCase</span>())) {
      <span style="color:#a6e22e">bin</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;1&#34;</span>;
    } <span style="color:#66d9ef">else</span> {
     <span style="color:#a6e22e">bin</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;0&#34;</span>; 
    }
  }

  <span style="color:#75715e">// conversione binario-decimale
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">exp</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">bin</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>) {
    <span style="color:#a6e22e">k</span> <span style="color:#f92672">+=</span> (<span style="color:#a6e22e">bin</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">*</span> (<span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#a6e22e">exp</span>);
    <span style="color:#a6e22e">exp</span><span style="color:#f92672">++</span>;
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">k</span>;
}
</code></pre></div><h2 id="applicare-una-funzione-a-un-oggetto">Applicare una funzione a un oggetto</h2>
<p>Si scriva una funzione applyobj(o, f) che, dato un oggetto o e una funzione f, restituisca un oggetto o’ con le stesse chiavi di o, e in cui il valore di ogni chiave k sia dato dall’applicazione di f al valore della chiave k in o, ovvero: o’.k == f(o.k).
Esempi:</p>
<p>applyobj({pere: 3, mele: 1}, x=&gt;2*x) → {pere: 6, mele: 2}</p>
<p>applyobj({io: &ldquo;Vincenzo&rdquo;, tu: &ldquo;Alina&rdquo;}, e=&gt;e.length) → {io: 8, tu: 5}</p>
<p>applyobj({io: 8, tu: 5}, e=&gt;e) → {io: 8, tu: 5}</p>
<p>applyobj({}, e=&gt;e+1) → {}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">applyobj</span>(<span style="color:#a6e22e">o</span>,<span style="color:#a6e22e">f</span>) {

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">o</span>) {
    <span style="color:#a6e22e">o</span>[<span style="color:#a6e22e">key</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">o</span>[<span style="color:#a6e22e">key</span>])
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">o</span>;
}
</code></pre></div><h2 id="maxprod">Maxprod</h2>
<p>Si scriva una funzione maxprod(a) che, dato un array di numeri naturali a, restituisca un oggetto con struttura {idx: i, val: n} in cui i sia l’indice e n il valore dell’elemento in a per cui è massimo il prodotto dell’indice per il valore dell’elemento. In caso di parità, si scelga l’elemento di indice minore.
Esempi:</p>
<p>maxprod([8, 2, 2, 1]) → {idx: 2, val: 2}</p>
<p>maxprod([1, 8, 1, 2, 2]) → {idx: 1, val: 8}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">maxprod</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">idx</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">val</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>}

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">idx</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">val_max_prod</span> <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Infinity</span>;

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">val_max_prod</span>) {
      <span style="color:#a6e22e">val_max_prod</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">i</span>;
      <span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]
      <span style="color:#a6e22e">idx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">i</span>;
    }
  }

  <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;idx&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">idx</span>; 
  <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;val&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">val</span>;
  
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><h2 id="appiattimento">Appiattimento</h2>
<p>Si consideri un array i cui elementi possono essere o numeri, oppure altri array dello stesso tipo (ovvero, aventi per elementi o numeri, oppure altri array dello stesso tipo, e così via). Si scriva una funzione appiattisci(a) che, dato un array a come descritto sopra, restituisca un array contenente i soli numeri, nello stesso ordine in cui comparivano nell’array a.
Esempi:</p>
<p>appiattisci([8, [2, 2], 1]) → [8, 2, 2, 1]</p>
<p>appiattisci([[1], 8, [1, 2], 2, []]) → [1, 8, 1, 2, 2]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">appiattisci</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> [];

  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">rec_flat</span>(<span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">a</span>) {
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">elem</span> <span style="color:#66d9ef">instanceof</span> Array) {
        <span style="color:#a6e22e">rec_flat</span>(<span style="color:#a6e22e">elem</span>);
      } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">elem</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;number&#39;</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">elem</span>);
      }
    }
  }

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#66d9ef">instanceof</span> Array)
      <span style="color:#a6e22e">rec_flat</span>(<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]);
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;number&#39;</span>)
      <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]);
  }  

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>;
}
</code></pre></div><h2 id="rosa-dei-venti">Rosa dei venti</h2>
<p>Si considerino le quattro direzioni cardinali (nord, est, sud, ovest), ciascuna codificata con la lettera corrispondente in (N, E, S, W), nonché le direzioni intermedie codificate con due lettere in ordine qualsiasi (es: NE = EN = nord-est).
Si scriva una funzione rosa(s) che, data una stringa s contenente la codifica di una direzione come indicato sopra, restituisca un oggetto {x: i, y: j} in cui i e j sono valori fra -1, 0 e 1 che rappresentano lo spostamento unitario lungo l’asse x e lungo l’asse y, rispettivamente, corrispondente alla direzione codificata da s.
Esempi:</p>
<p>rosa(&ldquo;NE&rdquo;) → {x: 1, y: 1}</p>
<p>rosa(&ldquo;EN&rdquo;) → {x: 1, y: 1}</p>
<p>rosa(&ldquo;S&rdquo;) → {x: 0, y: -1}</p>
<p>rosa(&ldquo;NW&rdquo;) → {x: -1, y: 1}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">rosa</span>(<span style="color:#a6e22e">s</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">x</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">y</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>}

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;&#39;</span>);
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">arr</span>) {
    <span style="color:#66d9ef">switch</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]) {
      <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;N&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;y&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
        <span style="color:#66d9ef">break</span>;
      <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;S&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;y&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
        <span style="color:#66d9ef">break</span>;
      <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;W&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;x&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
        <span style="color:#66d9ef">break</span>;
      <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;E&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;x&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
        <span style="color:#66d9ef">break</span>;
    }
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
}
</code></pre></div><h2 id="percorso">Percorso</h2>
<p>Si scriva una funzione percorso(a) che, dato un array a di direzioni codificate da stringhe come nell’esercizio precedente, restituisca la distanza euclidea fra l’origine degli assi e la posizione finale di un ipotetico viaggiatore che parta dall’origine e faccia un passo nella direzione indicata da ogni elemento del percorso, in ordine.
Esempi:</p>
<p>percorso([]) → 0</p>
<p>percorso([&ldquo;N&rdquo;,&ldquo;E&rdquo;]) → 1.4142136</p>
<p>percorso([&ldquo;N&rdquo;]) → 1</p>
<p>percorso([&ldquo;N&rdquo;,&ldquo;N&rdquo;,&ldquo;NE&rdquo;]) → 3.1622777</p>
<p>percorso([&ldquo;N&rdquo;,&ldquo;S&rdquo;]) → 0</p>
<p>percorso([&ldquo;N&rdquo;,&ldquo;S&rdquo;,&ldquo;NE&rdquo;]) → 1.4142136</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">percorso</span>(<span style="color:#a6e22e">a</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">x</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">y</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>};
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">tmp</span>;

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">tmp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">rosa</span>(<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]);
    <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;x&#34;</span>] <span style="color:#f92672">+=</span> <span style="color:#a6e22e">tmp</span>[<span style="color:#e6db74">&#34;x&#34;</span>];
    <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;y&#34;</span>] <span style="color:#f92672">+=</span> <span style="color:#a6e22e">tmp</span>[<span style="color:#e6db74">&#34;y&#34;</span>];
  }
  <span style="color:#66d9ef">return</span> Math.<span style="color:#a6e22e">sqrt</span>((<span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;x&#34;</span>])<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;y&#34;</span>])<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>);
}
</code></pre></div><h2 id="composizione-di-funzioni">Composizione di funzioni</h2>
<p>Si scriva una funzione componi(f,g) che, date due funzioni f e g, restituisca una funzione h tale che h(x) = g(f(x)).
Esempi:</p>
<p>componi(x=&gt;2<em>x, x=&gt;2</em>x)(3) → 12</p>
<p>componi(s=&gt;s.length, x=&gt;x**2+1)(“Vincenzo”) → 65</p>
<p>componi(a=&gt;a[0], s=&gt;s.length)([“pere”,”banane”]) → 4</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">componi</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">g</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">h</span>(<span style="color:#a6e22e">x</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">g</span>(<span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">x</span>));
  }
}

<span style="color:#75715e">// oppure
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">componi</span>(<span style="color:#a6e22e">f</span>,<span style="color:#a6e22e">g</span>) {
  <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">h</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span> =&gt; <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">g</span>(<span style="color:#a6e22e">x</span>)));
}
</code></pre></div><h2 id="differenza-di-date">Differenza di date</h2>
<p>Si rappresenti una data come un oggetto della forma {giorno: g, mese: m, anno: a}, in cui g, m, e a sono indicati come numeri (con l’usuale convenzione: Gennaio = 1, … Dicembre = 12 per i mesi).
Si scriva una funzione diff(d1, d2) che, date due date nel formato indicato sopra, restituisca il numero di giorni trascorsi fra la prima e la seconda data (si usino i numeri negativi se d2 è precedente a d1). Si ricorda che Febbraio è lungo 28 giorni negli anni ordinari, e 29 giorni negli anni bisestili; sono bisestili tutti gli anni divisibili per 4, salvo quelli che sono divisibili per 100 (che invece sono ordinari).
Ai fini dell’esercizio si possono trascurare le varie riforme del calendario avvenute nei secoli.
Esempi:</p>
<p>diff({giorno: 1, mese: 1, anno: 2020},{giorno: 4, mese: 2, anno: 2020}) → 34</p>
<p>diff({giorno: 1, mese: 1, anno: 2019},{giorno: 1, mese: 1, anno: 2020}) → 365</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">diff</span>(<span style="color:#a6e22e">d1</span>,<span style="color:#a6e22e">d2</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">tmp_d1</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date(<span style="color:#a6e22e">d1</span>[<span style="color:#e6db74">&#34;anno&#34;</span>],<span style="color:#a6e22e">d1</span>[<span style="color:#e6db74">&#34;mese&#34;</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>,<span style="color:#a6e22e">d1</span>[<span style="color:#e6db74">&#34;giorno&#34;</span>]);
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">tmp_d2</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date(<span style="color:#a6e22e">d2</span>[<span style="color:#e6db74">&#34;anno&#34;</span>],<span style="color:#a6e22e">d2</span>[<span style="color:#e6db74">&#34;mese&#34;</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>,<span style="color:#a6e22e">d2</span>[<span style="color:#e6db74">&#34;giorno&#34;</span>]);
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tmp_d2</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">tmp_d1</span>;
  <span style="color:#66d9ef">return</span> Math.<span style="color:#a6e22e">ceil</span>(<span style="color:#a6e22e">res</span><span style="color:#f92672">/</span>(<span style="color:#ae81ff">24</span><span style="color:#f92672">*</span><span style="color:#ae81ff">3600</span><span style="color:#f92672">*</span><span style="color:#ae81ff">1000</span>)); <span style="color:#75715e">// divido per i millisecondi in un giorno
</span><span style="color:#75715e"></span>}
</code></pre></div><h2 id="dividere-leredità">Dividere l&rsquo;eredità</h2>
<p>Si consideri un albero k-ario, in cui i nodi hanno la struttura {val: n, figli: [ t1, … tk ]}, come visto a lezione. Si vuole distribuire l’eredità di ogni nodo intermedio ai suoi figli in questo modo: il valore n di un nodo viene distribuito in parti uguali ai figli, ciascuno dei quali riceve dunque n/k. La quota ereditata viene sommata al valore di n di ciascun erede, e se l’erede non è una foglia, il risultato viene ulteriormente diviso ai figli, e così via.
Si scriva una funzione eredita(t) che, ricevuto come argomento un albero t nel formato descritto sopra, restituisca il valore totale (n proprio più quota ereditata) del nodo foglia con valore massimo.
Esempi:</p>
<p>t={val: 16, figli: [{val: 4},{val: 2, figli: [{val: 8},{val: 2}]}]}</p>
<p>eredita(t) → 13</p>
<p>eredita({val: 5}) → 5</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">eredita</span>(<span style="color:#a6e22e">t</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span> <span style="color:#f92672">===</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Infinity</span>;
  
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">figli</span> <span style="color:#f92672">===</span> <span style="color:#66d9ef">undefined</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span>;

  <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span><span style="color:#f92672">/</span><span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">figli</span>.<span style="color:#a6e22e">length</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">max</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span>;

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">figlio</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">figli</span>) {
    <span style="color:#a6e22e">figlio</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">val</span>;
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">figlio</span>.<span style="color:#a6e22e">val</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">max</span>)
      <span style="color:#a6e22e">max</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">figlio</span>.<span style="color:#a6e22e">val</span>;

    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">figlio</span>.<span style="color:#a6e22e">figli</span>) {
      <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">max_of_children</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">eredita</span>(<span style="color:#a6e22e">figlio</span>);
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">max_of_children</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">max</span>)
        <span style="color:#a6e22e">max</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">max_of_children</span>
    }   
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">max</span>;
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Introduzione al sito</title>
            <link>https://leonardo-arditti.github.io/Lab1-20-21/posts/introduzione-al-sito/</link>
            <pubDate>Tue, 15 Sep 2020 17:23:19 +0200</pubDate>
            
            <guid>https://leonardo-arditti.github.io/Lab1-20-21/posts/introduzione-al-sito/</guid>
            <description>L&amp;rsquo;obiettivo di questo blog è di raggruppare tutti gli esercizi svolti durante il corso di Laboratorio 1 dell&amp;rsquo;A.A 2020/2021 che è stato erogato interamente online.
Tutte le soluzioni agli esercizi possono essere provate utilizzando la piattaforma Repl.it con un nuovo progetto Node.js oppure usando la console devTools di Google Chrome premendo Ctrl+Shift+I su OS Windows.
Le soluzioni proposte sono un misto tra le soluzioni sviluppate da me durante i compiti e quelle fornite dai docenti nelle ore di lezione.</description>
            <content type="html"><![CDATA[<p>L&rsquo;obiettivo di questo blog è di raggruppare tutti gli esercizi svolti durante il corso di Laboratorio 1 dell&rsquo;A.A 2020/2021 che è stato erogato interamente online.</p>
<p>Tutte le soluzioni agli esercizi possono essere provate utilizzando la piattaforma <a href="https://replit.com/">Repl.it</a> con un nuovo progetto <a href="https://nodejs.org/it/">Node.js</a> oppure usando la console devTools di Google Chrome premendo  Ctrl+Shift+I su OS Windows.</p>
<p>Le soluzioni proposte sono un misto tra le soluzioni sviluppate da me durante i compiti e quelle fornite dai docenti nelle ore di lezione.</p>
<p>Questa raccolta ha il solo scopo di fornire un supporto a tutti gli studenti che si sono interfacciati alla programmazione (e al linguaggio JavaScript) per la prima volta, e non si sostituisce alle ore di lezione o esercitazione.</p>
<p>Se avete proposte (o soluzioni migliori agli esercizi!) sentitevi liberi di contattarmi mediante i canali nella homepage in modo che io possa includere le vostre modifiche al sito.</p>
<p>Buon proseguimento,</p>
<p>Leonardo</p>
<hr>
<p>Di seguito alcune risorse che possono rivelarsi utili durante lo svolgimento degli esercizi:</p>
<ul>
<li><a href="https://eloquentjavascript.net/">Eloquent Javascript</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">Mozilla Developer Network Docs</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
